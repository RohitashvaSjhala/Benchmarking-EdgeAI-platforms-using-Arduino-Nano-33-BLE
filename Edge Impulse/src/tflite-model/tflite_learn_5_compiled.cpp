/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 27.05.2024 23:11:10

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 8224;
#else
constexpr int kTensorArenaSize = 7200;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,375 } };
const TfArray<1, float> quant0_scale = { 1, { 0.059428554028272629, } };
const TfArray<1, int> quant0_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 125, 3, 1, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data2[2] = { -1, 672, };
const TfArray<1, int> tensor_dimension2 = { 1, { 2 } };
const ALIGN(16) int32_t tensor_data3[6] = { 8, -2, -2, 26, 1, -16, };
const TfArray<1, int> tensor_dimension3 = { 1, { 6 } };
const TfArray<1, float> quant3_scale = { 1, { 0.027925819158554077, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[6*32] = { 
  4, 8, -4, 5, -18, 4, -9, 3, 0, -3, -22, 3, -2, 5, -6, 2, 2, -7, 3, -25, -1, 10, 3, 5, 2, -4, 2, 7, -3, 5, -1, -7, 
  4, 4, -13, 3, -12, -3, -9, -12, 7, -12, -17, -17, 2, 7, -10, 3, 7, -11, 4, -10, 5, -9, -7, -3, 1, -1, 7, -2, -8, -6, 13, -11, 
  -35, 4, -11, -6, -127, 12, -48, -19, -8, 12, -4, 30, -40, 2, 10, -12, -30, 7, -9, 13, 10, 1, 1, -2, 0, -10, 22, -32, -17, 5, -6, -50, 
  1, -14, 18, -6, 15, 10, -35, 8, -33, 31, 25, 34, -30, -5, -119, -61, -15, -51, -58, 20, 5, -4, 0, -5, 1, -65, -19, 5, -44, -7, -26, -50, 
  5, -9, 0, -6, 8, 4, 5, -6, 6, 12, 6, 12, 1, 6, -13, 3, 2, -15, 3, 0, -7, -10, -3, 4, 0, 2, -1, -7, -11, -2, 10, -5, 
  1, 6, -4, -3, 4, -11, 18, 12, -4, 2, 9, -30, 6, 5, 14, 0, 1, 15, 1, 14, -9, 5, 4, -5, -7, -2, -7, 1, 21, 3, -16, 16, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 6,32 } };
const TfArray<1, float> quant4_scale = { 1, { 0.053887631744146347, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int32_t tensor_data5[32] = { -353, 42, 206, -60, 193, -117, -8, 170, -696, -426, 256, 560, -780, -23, 181, -370, -959, -35, -258, 675, 83, 236, -208, -20, -47, -413, -49, 339, -110, -52, -87, -210, };
const TfArray<1, int> tensor_dimension5 = { 1, { 32 } };
const TfArray<1, float> quant5_scale = { 1, { 0.00067851284984499216, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[32*672] = { 
  -16, 18, 13, -1, -9, -3, -11, 9, 14, 10, 5, -10, 2, -11, 1, 1, -5, 5, 12, 1, 0, 24, 12, 6, -10, 12, 2, 1, 24, -13, 8, 17, 4, 5, 15, 4, -1, 27, -9, 11, 4, 10, 2, -11, 24, -2, 14, 30, 4, 0, 14, 0, 5, 30, -9, 0, 0, 20, 3, -20, 35, 1, 23, 38, 10, -8, -1, 3, 8, 31, -9, 6, -2, 12, -2, -23, 22, 6, 18, 39, 14, 5, 6, 10, 4, 23, -10, 17, 9, 21, 7, -22, 12, 3, 16, 35, 18, 11, 4, 11, 12, 15, -8, 21, -1, 16, -5, -12, 21, 11, 18, 18, 19, 20, 19, 11, 22, 9, -15, 19, 4, 22, 2, -7, 22, 9, 9, 19, 9, 27, 20, 6, 13, -5, -9, 14, -7, 9, 3, -1, 15, 2, 4, 10, 5, 26, 19, -2, 11, 0, -4, 12, -11, 8, 11, 1, 4, -9, -6, 5, -12, 20, 23, -1, -10, 8, 5, 10, -22, 14, 10, 9, 20, -18, -5, 6, -8, 11, 23, -2, -15, 14, -2, 11, -17, 18, 7, 13, 22, -23, 10, 13, -16, 6, 5, 2, -15, 21, -14, 12, -20, 11, -6, -3, 10, -16, 11, 25, -25, -8, -8, 2, -21, 5, -25, 8, -44, 21, -6, -3, 5, -19, 4, 2, -9, 4, -11, 11, -16, 8, -16, 9, -31, 28, -2, -8, 21, -24, -5, 12, -2, 0, -6, 13, 2, -2, -12, 12, -10, 16, -4, -5, 14, -10, 11, 10, 13, 8, 5, 10, 8, 2, -4, 15, -3, 24, 1, 8, 10, -7, 12, 7, 4, 8, 8, 2, 8, -1, -4, 16, 1, 23, -2, 9, 23, -4, -2, 3, 17, 14, 9, 3, 16, 16, 3, 10, 15, 24, 0, 1, 5, -5, -1, 8, 20, 18, 20, 7, 14, 13, 3, 17, 7, 23, 9, 11, 7, 2, 3, 4, 9, 7, 23, -1, 6, -6, -13, 12, -7, 15, -1, 1, 3, 1, -6, 4, -11, -5, -1, 1, -4, -8, -27, 13, -21, 13, -7, -16, -23, -6, -9, -1, 6, -12, 13, 9, -7, -3, -20, 11, -23, 10, -12, -16, -17, 11, -12, 0, -15, -14, 4, 16, -8, -3, -21, 21, -20, 26, -15, -10, -14, 7, -12, -7, -13, -17, -9, 22, -15, 9, -10, 21, -17, 27, -18, -16, 0, 0, -4, 13, 2, 2, 6, 12, -10, 15, 2, 19, -8, 19, -15, -3, 5, 8, 1, 13, 8, 12, -2, 10, 1, 12, -4, 4, -5, 6, -12, -10, 26, 2, 19, 29, 7, 5, -10, 0, 0, 4, -9, 15, -6, 2, -5, -8, 14, -5, 6, 26, 5, 13, -3, 12, -1, 19, 1, 12, 1, 15, 0, 5, 19, 3, 17, 26, -15, 25, -1, 5, -4, 12, -2, 10, -12, 13, 7, 2, 9, -4, 3, 11, -8, 19, -5, -3, -17, 18, -7, 11, -20, 19, 1, 4, -1, -11, 2, 17, -10, 11, 3, 4, -10, 8, -10, 17, -15, 19, 4, 6, 2, -12, 12, 5, -21, 11, -9, 10, -16, -2, -17, 21, -25, 16, 9, -1, -2, -14, 9, 1, -12, 17, -12, 10, -14, 5, -11, 20, -25, 28, 1, -4, 11, -15, 3, 2, 5, 17, -1, 6, 6, 15, -3, 18, -20, 24, -3, -2, 9, -26, 7, 6, -13, 19, -4, 14, -2, 12, -5, 22, -18, 24, -2, -3, 5, -30, 8, 16, -5, 11, -4, 13, -3, 12, -9, 26, -14, 21, -8, 4, 10, -25, -6, -2, 7, 14, 2, 20, 5, 3, -9, 10, -21, 7, -3, -4, 1, -15, 0, -3, 7, 19, 1, 15, 3, 5, -29, 7, -23, -1, -6, -7, -4, -7, -2, -6, 2, 3, 1, 0, 6, -10, -30, -7, -24, -11, -2, -10, -3, -14, -12, -2, 11, 8, 7, 3, 4, 15, -13, 10, -22, -3, -1, -17, 16, -5, -1, 18, 8, 13, 6, 4, 5, -20, -26, 11, -11, 7, -2, -16, 20, 2, 29, 23, 
  -14, 9, -6, 16, -37, 3, 6, 1, 19, 7, 20, 26, -5, 11, -18, 30, -27, 5, 11, 4, -38, -5, 0, 1, 19, 11, 22, 10, -11, -2, 15, 7, -31, 5, 17, 4, -38, 6, 1, -1, 14, -5, 13, 11, -5, 1, 17, 11, -21, 6, 9, 13, -35, 5, -1, 2, 8, 7, 14, 16, -5, 3, 24, 19, -20, 5, 21, 5, -28, 5, 1, -5, 3, 13, 17, 23, -3, 9, 13, 6, -22, 1, 8, -7, -34, 4, 1, -16, 6, 12, 6, 17, -12, 5, 15, 17, -24, 3, -3, -1, -30, 5, 1, -19, 6, 3, 10, 15, -15, 5, 9, 26, -17, 14, 7, 12, -26, -2, 10, -14, 24, -5, 0, 21, -9, -3, 13, 28, -25, 12, 7, 11, -33, 3, 5, -12, 17, 5, 6, 17, -7, 3, 15, 29, -28, 6, 1, 23, -38, -11, 7, 0, 31, -1, 2, 24, 4, 10, 16, 23, -39, 4, -3, 24, -43, -2, 2, -5, 31, 2, -1, 15, -2, 19, 9, 25, -34, 5, -8, 18, -47, 2, 1, -19, 20, -1, 6, 10, -8, 18, 19, 31, -31, 4, -1, 7, -49, 0, -2, -23, 14, -5, 1, 12, -13, 12, 18, 19, -35, 6, -4, 8, -48, 5, 7, -16, 28, -9, 13, 16, -9, 17, 31, 23, -38, 3, 7, 11, -35, 0, 9, -10, 19, -6, -1, 18, -6, 9, 29, 9, -31, 17, 8, 9, -37, 18, 4, -9, 20, 7, 9, 21, -3, 8, 18, 24, -40, 16, -2, 3, -38, 10, -2, -12, 20, 6, 3, 18, -8, 18, 17, 22, -33, 13, 9, 2, -37, 13, -2, -10, 10, -7, 0, 6, -5, 11, 27, 30, -27, 7, 3, 28, -28, 4, -5, 1, 22, 3, 2, 11, 2, 15, 22, 22, -27, 11, -3, 24, -40, 10, 5, 5, 19, 12, 0, 21, 2, 8, 23, 20, -31, 6, 4, 23, -33, 12, 5, 9, 18, 11, -2, 15, -4, 6, 26, 30, -25, 9, 6, 20, -35, 3, 11, 7, 19, 12, 0, 18, -8, 15, 34, 34, -32, 4, -7, 19, -36, 16, 7, 1, 6, -2, -9, 9, -5, 11, 24, 27, -33, 5, 1, 8, -44, 26, 4, -12, 4, 1, -7, 9, 1, 12, 15, 38, -25, 2, -7, 20, -40, 11, 10, -10, 6, 0, -7, 15, 0, 5, 22, 36, -23, 3, -11, 25, -34, 12, 17, 6, 27, 5, 1, 13, 5, 13, 19, 32, -23, 8, -3, 12, -35, 16, 17, -2, 37, -6, -6, 16, -1, 12, 22, 27, -17, 10, -9, 11, -28, 12, 12, -15, 36, -10, -4, 4, 0, 4, 25, 39, -29, 24, -23, 17, -38, 19, 11, -5, 26, 8, -7, 4, 6, 6, 27, 45, -37, 10, -8, 14, -51, 31, 6, -7, 23, 4, -5, 1, 1, -1, 32, 36, -24, 6, -13, 19, -42, 30, 6, -3, 29, 13, 3, -2, 5, 13, 31, 35, -32, 16, -11, 21, -27, 30, 14, 1, 35, 12, 8, 2, 7, 13, 28, 35, -16, 12, -6, 18, -24, 23, 10, -8, 24, 0, 8, 5, -5, 8, 34, 28, -18, 13, -1, 9, -18, 18, 1, -9, 26, -5, 2, -6, 4, 12, 22, 30, -19, 15, -14, 20, -26, 23, -7, -1, 28, 8, -6, 0, -2, 22, 13, 34, -19, 13, -12, 6, -26, 26, -3, 2, 28, 5, -3, -6, 4, 13, 10, 28, -23, 7, -8, 17, -30, 27, -8, 5, 30, -3, 9, -9, -4, 21, 17, 32, -20, 9, -14, 12, -28, 16, 1, -3, 32, -3, 2, -4, 5, 13, 9, 36, -20, 13, -10, 12, -28, 15, 8, 2, 20, -5, 2, -4, -3, 16, 25, 32, -11, 10, -7, 12, -30, 18, 3, 0, 18, -5, -4, -4, -3, 17, 16, 28, -10, 18, -9, 4, -26, 10, 6, -1, 20, -2, 2, 1, 4, 11, 9, 34, -6, 7, -3, 14, -39, -14, 16, -12, 3, -21, -9, -2, 4, 19, 15, 23, 
  0, -1, 6, 29, 13, 3, -50, 2, -20, -19, -29, -11, 24, 8, 1, -18, 4, -9, 33, 28, 5, 0, -29, 1, -17, -6, -27, -4, 21, 13, -23, 0, 15, -12, 18, 20, 5, 9, -33, 5, -18, -13, -40, -9, 36, 18, -12, 7, 12, -24, 33, 31, 2, 15, -18, 4, -21, -9, -38, 4, 17, 15, -19, 5, 8, -21, 16, 35, -2, 3, -16, -1, -16, -8, -48, 5, 32, 13, -10, 8, 14, -24, 16, 21, -1, 13, -18, 5, -18, 2, -50, 0, 21, 7, -12, 4, 12, -15, 28, 29, 3, 2, -14, 6, -19, -5, -51, 15, 17, 9, -11, -10, 18, -15, 27, 30, 10, 4, -23, 2, -17, -6, -22, 12, 20, 13, -26, -9, 24, -2, 37, 25, 13, 8, -22, 10, -20, 7, -23, 5, 12, 17, -21, 5, 20, -4, 55, 31, 12, 2, -14, 12, -18, 3, -32, 10, 5, 13, -17, -10, 12, -18, 14, 39, 2, -4, -12, 14, -23, 1, -52, 10, 0, 19, -24, -10, 15, -26, 20, 34, 5, 0, -25, 13, -20, 2, -39, 5, 10, 21, -14, -1, 20, -26, 5, 39, 4, -10, -15, 23, -10, 14, -51, 6, 4, 22, -20, -10, 29, -19, 20, 30, -1, -9, -10, 13, -9, 7, -45, 16, 20, 10, -31, 1, 19, -7, 6, 34, 8, -8, -9, 18, -13, -3, -40, 15, 24, 15, -12, 10, 24, -5, 5, 38, 2, -12, -4, 6, -8, 1, -37, 19, 30, 12, -19, 14, 27, -3, 12, 23, 12, -5, -1, 7, 5, -6, -45, 21, 25, 20, -19, -1, 9, -7, 6, 23, 3, 0, 7, 16, -10, 2, -38, 25, 18, 11, -6, 8, 17, -4, 24, 33, 6, -8, 8, 7, -14, -4, -24, 20, 17, 18, -13, 6, 23, -4, 19, 19, 2, -11, 12, 11, -5, 4, -24, 14, 14, 23, -15, 1, 15, 2, 14, 24, -7, -6, 8, 2, -7, 0, -22, 15, 26, 24, -9, 4, 8, 6, 9, 17, 5, 1, 12, 1, 4, -2, -27, 12, 16, 25, -21, -1, 13, 7, 9, 28, 1, -9, 6, 3, 9, -12, -38, 11, 28, 24, -22, 4, 13, 7, 10, 30, 10, 1, -3, 8, -9, -8, -18, 15, 23, 25, -20, -12, 21, 3, 14, 24, 10, -7, 1, 3, -13, 5, -35, 15, 22, 17, -20, -15, 21, -1, 8, 30, 14, -7, 12, 10, -7, -3, -39, 10, 22, 24, -35, -11, 18, 5, 17, 27, 8, 4, 11, 8, -3, 7, -17, 7, 19, 27, -26, 5, 15, 8, 12, 20, 21, 2, -4, 11, -12, 10, -24, 3, 13, 28, -23, -6, 26, 3, 4, 27, 15, -3, 6, 14, -15, 0, -27, 3, 6, 25, -29, -10, 30, -3, 6, 17, 12, -15, -10, 0, -23, -15, -27, -6, 14, 32, -33, -11, 23, 0, 5, 21, 5, -13, -12, 5, -14, 5, -37, 12, 15, 23, -35, -1, 12, -7, 11, 24, -1, -15, -10, 3, -8, 2, -54, 9, 29, 20, -21, -10, 21, -2, 1, 20, -9, 0, -17, -4, -8, -4, -41, -1, 23, 13, -29, 2, 18, -1, 0, 16, 6, -5, -23, 2, -20, -12, -43, 3, 19, 9, -21, -12, 21, -2, 18, 16, 1, 3, -16, 3, -19, -13, -35, 6, 18, 9, -27, -7, 17, 5, 19, 13, -4, 7, -13, -2, -15, -7, -35, 9, 39, 10, -13, 7, 15, 0, 18, 17, 1, 16, -24, 0, -9, 2, -38, -2, 43, 10, -17, 6, 17, -5, 9, 19, -2, 22, -18, -1, -4, -4, -27, -13, 37, 15, -18, 4, 15, -4, 7, 9, -7, 12, -14, -5, -17, 9, -28, -3, 34, 10, -28, -10, 9, -3, -1, 7, -10, 12, -10, -6, -22, -3, -15, -4, 26, 4, -31, -6, -7, -5, 8, 14, -4, 6, -13, 6, -21, -4, -14, -11, 27, 5, -20, -8, -1, -22, 9, 16, 12, -3, -45, 5, -27, -10, -22, -9, 6, 21, -2, -2, 
  2, 2, 3, -5, 0, -2, -1, -4, -4, -2, 2, 2, 4, 1, -1, -5, -1, -5, -4, -1, -5, 3, -5, 2, 2, 2, 3, -1, -5, -3, -4, -2, -6, 2, 0, 0, -3, 0, 2, -6, 2, 2, -6, -3, -5, 1, -7, -1, -1, 1, 0, -2, 1, -1, 1, -4, 3, 0, -3, -3, -6, 1, -3, -6, 1, -5, 0, -1, 2, -2, -1, -5, -1, 2, 2, 2, 0, -3, -3, 1, -3, -7, 1, 1, -2, 0, -7, -6, 1, -3, 3, -3, -1, -1, 0, -5, -2, -4, -2, -6, 1, -1, -6, -1, -1, -2, -2, 3, 1, -6, 2, 1, 3, 4, 0, -2, 3, 1, 4, -5, -5, -4, -4, -4, -2, -1, -1, 2, -3, 4, -5, 3, 3, 1, 0, 4, -5, -5, -3, -4, -2, -6, 1, -3, -3, -5, -6, 3, -7, -1, -1, -5, 2, 5, -5, 1, -4, -1, 0, -6, -2, 5, -1, -4, -3, 3, 3, 4, -1, 5, 2, 0, -4, -7, 2, 0, 3, -5, 0, 1, 2, 0, 0, 1, -4, -3, 2, 1, 0, -4, 0, -3, 3, -3, -5, 2, 1, 2, 0, -3, -6, -5, -5, -5, 1, -5, -2, -5, 0, 1, -2, 3, 2, -7, -5, 0, -2, -1, -4, 0, -4, -3, -6, 3, 1, -2, 0, -4, 0, -4, -2, -6, -5, 2, -2, 1, -3, -7, -3, -3, -3, -6, -5, -2, 2, -2, -2, 2, 0, -3, 2, -5, 0, -3, 2, -1, -2, -1, -1, -2, -6, 2, -1, 4, 0, -5, 3, -6, 4, -3, 0, -7, -5, 2, -6, 1, 3, 0, 1, 0, -6, 2, 4, -6, -5, -1, 1, 2, -3, 1, -2, -5, 2, 1, -2, 1, -1, -3, -3, 2, -3, -6, 1, -3, -3, 2, 3, 0, -1, 3, 4, -2, -3, 4, 2, -5, -2, -3, -1, -5, -6, 0, 3, 2, 1, -3, -1, -1, 2, 4, -3, 1, -5, 1, -5, -4, -1, 0, -3, -2, -2, -4, 0, 1, -1, 3, -2, 0, -5, 2, -2, -5, -4, -2, -3, -1, -2, 0, -5, 0, 3, -2, -5, -3, -1, -7, 1, -4, -6, 1, 3, 2, -3, -4, -3, 3, 0, 3, 0, -5, -4, -4, 0, 3, 3, 0, -2, 0, -6, -1, 2, -1, -5, -1, -4, -5, 0, -7, -7, -1, 4, 5, -3, 0, 2, -6, -5, 2, -3, -5, 0, -3, 2, -3, 3, -4, -2, 4, 4, -2, -2, 2, 1, 1, -6, -5, -3, 1, 1, -6, -2, 3, -3, -4, 0, -2, 1, -5, 3, -2, -4, -3, -2, 3, 2, -1, -3, 3, -2, 2, -3, -3, 1, -1, 1, -3, 4, 2, 2, -1, -1, -3, 2, 0, -6, -2, 3, -5, -6, 1, 1, 3, -2, 2, -2, -1, 3, 2, -4, -2, 3, 2, -4, -5, -3, -3, -3, 0, 3, -6, 2, -2, 4, 2, -6, 1, -2, -2, -1, 1, 0, -5, 3, -3, -1, -2, 1, -5, -1, -2, 0, 1, -3, -4, -6, -6, -4, -3, 5, -2, 2, -1, -2, -6, 1, -6, -5, -2, -1, 1, -6, 0, -7, -1, -2, -3, 0, -2, -4, -2, -3, 0, 0, 0, -3, 1, -5, -4, -4, -3, -5, -4, -5, -2, -6, -2, 4, 0, -5, 0, -3, -4, -1, 3, -3, 0, -6, -1, -3, 3, -5, 0, 2, -2, -1, -5, -1, 3, -7, -1, -1, -2, 0, -5, 1, -3, 1, 3, -2, -5, -1, -6, 1, -2, -5, -2, -4, -5, -4, -2, 0, 1, -7, 0, -2, 2, -7, 0, -1, -3, -3, 3, 3, -4, -3, -4, 1, -1, -4, -4, -2, 0, -2, 2, 2, -2, -7, -1, -4, -6, -4, -4, 1, -3, 1, -1, 2, -7, 1, -6, -6, 2, -4, 1, -2, 1, -2, 3, 1, -1, -4, -5, 1, 2, -4, 0, 1, -2, 0, -1, 0, 3, 1, -2, -1, -1, 0, -3, 2, -2, -1, -6, 
  -8, -23, -17, 6, -1, 6, -3, -18, -31, 17, -69, -57, 1, -8, 9, 3, 6, -13, -12, -2, 5, 23, 8, -7, -3, 20, -47, -31, 12, -3, -19, 1, 10, -27, 4, 9, -11, 24, 10, -7, -10, -8, -33, -19, 14, -5, -19, 7, 13, -11, -4, 5, -13, 28, 3, -9, 5, -4, -22, -13, 11, -4, -22, 6, 12, -2, 1, 0, -6, 7, -10, -14, 7, -14, -20, -1, 25, 3, -13, -2, 12, -3, 12, 15, -8, 14, -24, -2, 9, -25, -25, 3, 22, 12, -14, 11, 15, 3, 5, 13, -8, 17, -24, -16, 9, -32, -1, 6, 22, 3, -11, 7, 2, 12, 11, 3, -9, 31, -30, -28, 5, -33, -8, 4, 11, -4, -5, 4, -2, 10, 15, -4, -9, 31, -42, -25, -7, -31, -5, 16, 10, -7, 0, 2, -2, 10, 29, 2, -6, 22, -58, -16, -16, -22, 14, 9, 9, -10, 0, 6, 7, 3, 30, -3, -3, 31, -77, 0, -26, -15, 27, -14, 4, -14, -2, 11, 0, 4, 29, -5, 5, 39, -62, 9, -26, -6, 16, -26, 3, -21, -2, 14, 13, -3, 24, -1, 6, 29, -37, 3, -37, 5, -9, -19, -3, -8, -2, 10, 12, -23, 9, 1, 5, 13, -61, -8, -26, 35, -33, -34, -6, -8, -7, 21, 21, -19, 4, 5, 5, 17, -48, -3, -14, 49, -32, -36, -2, 8, -18, 20, 20, -8, -19, 17, 14, 5, -25, -21, -6, 25, -13, -27, 0, 3, -8, 13, 21, 1, -25, 15, 14, -2, -25, -19, 4, 10, -15, -18, 15, 1, -15, 8, 21, 9, -17, 11, 15, -5, -23, -19, -6, 6, -35, -11, 18, 9, -16, 8, 14, 7, -31, 13, 10, 22, -4, -19, 1, 8, -43, -7, 33, 5, -17, 16, -3, 12, -30, 9, 2, 32, -13, -24, -5, -20, -56, -4, 30, 4, -10, 17, 6, 10, -13, -3, -12, 36, -7, -26, -2, -32, -33, -4, 20, -7, 11, 36, 2, 12, 4, 9, -16, 21, -17, -22, -13, -42, -30, 8, 18, -3, 12, 36, -12, -2, 7, 2, -18, 24, -37, -10, -12, -24, -28, 5, 46, 7, -2, 23, 2, 4, 17, 15, -19, 32, -40, -20, -6, -34, -20, 1, 37, 3, -9, 25, 0, -1, 17, 8, -20, 24, -32, -25, -4, -22, -4, -4, 42, 13, -8, 24, 11, 1, 4, 13, -4, 35, -35, -38, -2, -18, -7, -8, 22, 13, -7, 6, 7, 4, 12, -14, 3, 24, -58, -27, -6, -8, -8, -8, 14, 14, -4, 7, 6, 9, 16, -19, 13, 17, -49, -20, 1, -14, -3, -10, 8, 14, -10, 2, 4, 2, 10, -4, 17, 7, -51, 9, -17, -5, 0, -18, 7, 12, -13, -18, 10, -5, -1, 21, 20, 23, -48, 22, -17, 33, -32, -23, 31, 14, -24, -11, 29, -16, -1, 17, 22, 16, -28, 17, -4, 57, -49, -35, 11, 20, -17, -2, 20, -17, -25, 12, 24, 12, -83, 12, -7, 53, -57, -33, 0, 13, -19, 6, 23, -12, -37, 10, 18, 25, -77, 10, 9, 49, -57, -39, 4, 14, -19, 8, 33, -13, -19, 10, 25, 25, -31, 6, 19, 14, -43, -39, 13, 13, -40, -4, 28, -8, -9, 21, 18, 20, 4, 1, 16, 4, -25, -34, 22, 10, -39, 9, 21, -3, -11, 30, 15, 17, -13, 4, 13, -17, -22, -28, 38, 12, -25, 19, 17, 0, -16, 31, 3, 23, -16, 3, 20, -19, -17, -15, 29, 22, -13, 10, 8, 13, -15, 17, 3, 27, -12, -14, 14, -36, -27, -5, 25, 13, 0, 14, 13, 14, -7, -3, -6, 31, -26, -10, 9, -33, -17, 8, 3, 9, 18, 17, 8, 15, -1, 2, 0, 29, -22, -3, -5, -38, -24, 4, 10, 3, 13, 16, 1, 14, 7, 2, -7, 47, -31, 9, -16, -21, -24, -8, 41, -4, 13, 25, 4, 9, 9, -2, -13, 14, -17, -27, -5, -26, -3, -14, 32, 1, -1, 3, 
  -2, 39, -11, 14, 0, -7, 12, -2, -3, -13, 7, 39, 4, -20, -11, -5, -14, 20, -24, 18, -5, 1, 1, -3, -13, -14, -13, 28, 14, -27, -4, 7, 3, 12, -19, 4, -4, 0, 1, -2, -9, -6, -19, 27, 15, -15, -12, -3, -5, 26, -18, 10, -6, -4, 13, -3, -2, -16, -10, 30, 11, -28, -6, 5, 0, 21, -5, 6, -5, -14, 7, -10, 6, -17, -2, 35, -5, -16, -11, 4, -2, 15, -12, 13, -6, -8, 4, -1, 0, -4, -1, 19, 5, -11, -8, 0, 1, 9, -12, 15, 3, -3, 2, -1, 0, -16, -11, 19, 9, -8, -8, -14, 0, 16, -12, 15, 0, -7, -9, -5, 0, -14, -17, 16, 7, -9, -16, -10, 3, 16, 7, 9, 9, -22, -2, 5, -11, -17, -9, 23, -2, -8, -20, -13, 5, 26, 5, 14, 10, -7, 22, 2, 3, -8, 6, 30, -4, -9, -10, -10, 7, 35, 13, 13, 10, -4, 20, -2, 8, -10, 4, 41, 17, -5, -7, 4, 6, 31, 1, 4, 7, 0, 22, 5, 1, -13, 2, 45, 12, -13, -1, 2, 6, 27, -8, 16, 4, 15, 15, -1, 1, -6, -10, 30, 34, -13, 11, 14, -7, 21, -4, 11, -1, 14, 9, 8, 9, -6, -4, 37, 23, -5, 4, 14, 1, 29, -11, 27, -1, 6, 22, 9, 8, -3, 3, 37, 27, -13, 1, 12, 2, 34, -15, 6, 5, -4, 17, -4, 5, -3, 13, 35, 8, -13, -3, -5, 6, 34, -2, 4, 4, -5, 16, -4, 4, -13, 7, 37, 17, -11, -5, -4, -4, 29, -12, 3, 1, -6, 11, -5, -6, -9, 9, 37, 17, -6, -4, -10, 1, 21, -18, 3, 3, 0, 5, -6, 3, 3, 1, 21, 9, -9, -10, 4, 7, 24, -14, 3, 10, -5, 13, 0, 6, -12, 1, 24, 13, -9, -14, -5, 14, 27, -3, 12, 12, -1, 9, 4, 12, -9, 6, 32, 13, -3, -2, 10, 12, 26, -6, 10, 16, -12, -4, 1, 4, -15, -2, 35, 18, -2, 3, 10, 15, 34, 4, 14, 11, 0, 4, 2, 14, -7, -8, 40, 21, -4, -1, 10, 9, 38, 0, 7, 9, 4, 4, -5, 4, -6, 11, 37, 10, -13, -3, -4, 22, 33, -2, 3, 24, -1, -3, -4, 5, -9, -1, 30, -5, -8, -6, -4, 15, 30, -1, -4, 20, -17, -9, 9, -1, -13, -4, 26, -22, -10, -12, -9, 13, 32, -5, -2, 16, -21, -19, -9, -4, -30, -4, 21, -5, -16, -18, -6, 15, 26, -13, -4, 8, -13, -14, -15, 4, -18, -12, 17, -12, -10, -18, -5, 12, 39, -2, -3, 24, 0, 3, -1, 9, -15, 6, 22, 8, -8, -16, -2, 5, 36, -11, 1, 9, 5, 8, -6, 5, -17, 3, 27, 10, -13, -11, 4, 1, 30, -1, -12, 7, -2, -3, -15, 6, -13, -3, 32, 10, -12, -17, 1, -5, 26, -15, -27, 2, -5, -11, -14, -1, -20, -5, 32, -1, -16, -19, -10, -7, 35, -10, -23, -3, -5, -4, -18, -4, -22, 6, 28, 10, -25, -14, -7, -4, 36, -18, -9, 4, 4, -8, -20, -4, -10, 11, 29, 9, -19, -17, -8, 1, 26, -5, -16, 11, 5, -4, -23, 2, -17, 2, 15, 15, -21, -8, 5, -13, 21, -9, -22, -5, 1, -1, -36, -9, -23, 5, 19, 1, -29, -8, -9, -7, 12, -17, -33, -8, 4, 9, -32, -14, -20, -6, 20, -7, -25, -6, -8, -6, 11, -24, -20, -6, -1, 7, -22, -27, -20, -2, 27, 2, -31, -11, -9, -1, 21, -22, -12, 4, 0, 1, -17, -14, -12, -2, 29, 9, -24, -11, -8, 7, 27, -22, -12, 10, 3, 15, -15, -13, -18, -2, 23, 11, -21, -11, -9, 4, 22, -12, -9, 7, -5, -3, -16, -12, -16, 3, 19, 15, -16, -15, -10, 4, 20, -15, -16, 22, -19, -5, -12, -13, -13, -9, 26, -4, -4, 1, -5, 
  -4, 20, 3, 0, -31, 20, 9, -7, 36, 2, 14, 21, 12, 7, -11, 14, -14, 11, 12, -2, -28, 40, -11, -9, 10, -2, 7, 13, -8, -8, 19, 8, -25, 0, 1, -6, -23, 21, -13, -5, -16, -3, 7, 8, -24, -7, 26, -3, -26, -22, 11, 8, -17, 19, -15, 6, -33, 1, 19, -1, -35, -2, 20, -19, -4, -16, 9, -4, -3, 9, -15, 3, -47, 16, 22, -14, -45, -5, -2, -18, 2, -16, 10, 5, 20, -17, -17, -4, -53, 27, 36, -25, -69, 1, -5, -39, 16, -29, 10, 5, 32, -42, -42, 1, -46, 18, 27, -39, -68, -1, -19, -38, 7, -32, 10, 14, 23, -64, -40, 6, -56, 26, 16, -46, -67, -2, -14, -20, 23, -33, -6, 16, 26, -67, -18, 13, -36, 14, -6, -31, -54, 2, -11, -14, 21, -28, -6, 2, 33, -46, 2, 0, -18, 7, -20, -26, -46, 6, -8, 12, 20, -15, 1, 0, 18, -41, 13, -26, -4, -11, -12, -11, -15, -3, 0, 9, 22, -5, 24, 4, 6, -28, 26, -24, 20, -20, -10, -8, -15, -15, 1, 20, 2, 8, 6, 4, -7, -9, 31, -20, 35, -31, -18, 11, -18, -7, 7, 20, 0, 10, 10, 10, -13, -8, 20, -24, 38, -36, -13, 29, -1, 4, 4, 14, -3, 18, 15, 4, -15, 8, 27, -15, 37, -33, 2, 30, 9, -1, 11, 23, -7, 30, 14, -8, -32, 24, 25, -18, 34, -32, 0, 42, 4, -6, 14, 26, -17, 34, 15, -16, -35, 31, 19, -27, 32, -35, 8, 35, 1, -11, 16, 19, -15, 35, 16, -8, -37, 33, 2, -12, 22, -22, 24, 31, 4, -7, 16, 9, -22, 32, 17, -9, -24, 29, -5, -11, 7, -20, 21, 14, -10, -18, 1, -3, -12, 25, 3, -17, -9, 19, -2, 4, 6, -15, 24, 8, -27, -21, -2, -7, -3, 27, 17, -4, 12, 5, -12, 10, -7, 2, 26, 19, -39, -12, -3, -17, -1, 12, 2, 2, 22, -17, -13, 11, -22, 13, 21, 20, -21, -12, -8, -31, 13, 7, 15, -6, 27, -15, -19, 1, -21, 33, 17, 20, -15, -5, -15, -35, 28, -15, -14, 1, 33, -20, -21, -10, -7, 52, 6, 1, -14, 9, -22, -34, 20, -26, -31, 16, 33, -31, -34, 7, -9, 39, 12, -15, -38, 23, -13, -13, 18, -41, -31, 31, 32, -46, -11, 6, -15, 50, 2, -28, -44, 30, -7, -25, 27, -53, -22, 27, 40, -44, 10, -3, 0, 53, -16, -44, -39, 26, -17, -9, 20, -34, -12, 6, 31, -35, 28, -18, -1, 17, -24, -30, -19, 31, -6, 4, 5, -34, -11, 9, 8, -16, 32, -20, 6, 4, -31, -29, 5, 28, 16, 27, 7, -41, 6, 12, -12, 3, 23, -12, 23, 7, -31, -23, 17, 27, 15, 35, -2, -24, 1, 19, -27, 18, 8, -8, 15, -11, -22, -20, 6, 23, 31, 31, 3, -4, 12, 13, -33, 5, 0, -2, 13, -25, -6, -5, 1, 15, 29, 24, -12, 4, 25, 20, -34, -2, 0, 8, 13, -30, 1, 10, 1, 3, 20, 16, -23, 11, 20, 6, -30, 10, 1, 12, 21, -22, -8, 14, 17, -2, 18, 8, -10, 13, 15, -5, -29, 29, -11, 0, 16, -22, 0, 13, 10, -1, 10, 6, -4, 18, 17, -20, -19, 33, -13, -3, 12, -21, 7, 14, -6, -5, 0, -11, -3, 22, 21, -17, -4, 28, -9, 5, 10, -20, 20, 16, -18, -16, -3, -9, -2, 17, 23, -22, -12, 20, -2, 13, 7, -9, 21, 11, -18, -17, -4, -16, 1, 12, 26, -13, 9, 9, -5, 16, -1, 2, 19, 3, -14, -15, -16, -21, 7, -1, 14, -6, 18, -5, -1, 11, -5, 21, 16, 7, -10, -4, -18, -29, 11, -15, 15, 1, 26, -17, -2, 4, 0, 29, 15, -6, -25, 1, -38, -43, -6, -22, 16, -11, 19, 0, -21, 14, 8, 12, 21, -6, -33, 7, -13, -13, 
  5, 10, 43, -7, 19, -1, -19, -29, -6, -11, 41, -12, -32, 14, -2, 3, 4, 14, 29, -8, 4, -2, 1, -31, -1, 2, 31, -9, -34, 7, 11, 3, 10, 9, 33, 4, 9, 3, -8, -24, -1, 9, 16, -1, -33, 18, 23, 16, 5, 7, 34, 3, -15, 8, -2, -31, 2, 19, 10, 2, -17, 9, 22, 10, -10, 19, 20, 1, -14, 2, 7, -36, 6, 4, 12, 7, -17, 6, 9, 9, -4, 16, 38, -17, -13, 5, 4, -38, 7, 2, 11, 14, -24, 9, 16, 2, 1, 30, 32, -25, -11, 14, -9, -45, -1, 11, 19, 21, -23, -2, 10, -6, 7, 41, 51, -31, 2, 15, 11, -45, 4, 25, 35, 42, -24, -24, 16, 0, -14, 26, 45, -28, -6, 13, -7, -27, -23, 19, 27, 27, -38, -20, 14, 5, -12, 26, 33, -10, -1, 16, -20, -15, -36, 24, 29, 14, -35, -14, 5, -2, -1, 31, 15, -18, -4, 2, -16, -32, -48, 26, 39, 20, -44, -19, -13, -20, -2, 20, 9, 1, 2, -6, -52, -26, -41, 0, 29, 2, -48, -13, -12, -6, -4, 17, 23, -8, 1, -20, -36, -10, -40, 11, 34, 3, -39, -11, -5, -1, 8, 10, -3, -1, 6, -21, -34, -13, -34, 12, 16, -1, -16, -8, 3, 6, 7, -6, 1, 7, 15, -29, -10, -9, -41, 35, 17, 3, -22, -13, 10, 18, 5, -1, -11, -8, 17, -12, -2, -16, -39, 27, -8, 3, -2, -15, 14, 21, 6, -5, -18, -20, 21, -37, -1, -45, -13, -14, -10, -6, 10, -13, 8, 13, -3, -1, -11, -29, 11, -5, 9, -51, -3, -4, -3, -15, 2, -3, 3, 2, 13, 16, 15, -28, 18, -14, -14, -51, -6, -6, 4, -8, -20, 13, 13, -6, 19, 25, 30, -4, 21, -7, -14, -29, 6, 1, 19, -8, -1, 10, 41, 11, 8, 20, 26, -8, 17, 3, 16, -17, 10, -9, 17, 12, -4, 14, 24, 11, 2, 23, 17, 3, 10, 6, 13, -8, 24, 3, -1, 11, -4, 30, 14, 18, 2, 18, 23, 4, -7, 2, -4, -24, 29, 1, 16, 3, -7, 31, 12, 1, 3, 29, 27, -27, 1, 18, -7, -37, 13, -4, 17, -1, -14, 18, 0, 0, 11, 27, 36, -37, 7, 16, -8, -42, 13, 5, 17, 13, -33, 12, 3, -5, 9, 31, 47, -40, 2, 16, -14, -45, 4, 0, 19, 15, -27, -4, 8, -6, 6, 25, 49, -31, 7, 19, -11, -22, 1, 7, 14, 17, -28, 0, 3, -1, -3, 8, 38, -4, -3, 9, -24, -13, -22, 27, 21, -2, -14, 3, -8, -4, -6, -7, 32, 2, -7, 3, -54, -30, -35, 31, 6, -24, -16, 11, 3, -10, -14, -30, 21, 2, -14, -1, -47, -14, -39, 24, -9, -29, -32, 12, -15, 4, 1, -31, 9, 1, -11, -7, -52, -27, -39, 18, -17, -41, -13, 5, 10, 20, 6, -31, 4, -9, -3, -6, -41, -27, -37, 24, -5, -43, -24, 0, 32, 37, -1, -22, 3, -10, 11, 0, -7, -12, -23, 24, 0, -23, -9, -2, 34, 25, -1, -29, -26, -11, 11, 0, 33, -3, -29, 31, -34, -14, 1, -3, 22, 18, -13, -34, -27, -15, 4, -24, 24, -18, -6, 11, -39, -21, 4, -2, 11, 12, -19, -50, -37, -19, -17, 5, -13, -26, -5, -10, -56, -37, -8, 6, 14, 19, -4, -32, 2, -4, -13, -2, -24, -13, 1, -21, -21, -24, -22, 13, 18, 2, 0, 2, 31, -13, -2, 3, -25, -12, 9, -11, 5, -11, -24, 15, 14, 4, 12, 15, 46, -9, 5, 8, -18, -17, 24, -17, 3, -5, -17, 3, 14, 15, 5, 17, 28, -11, -4, 22, -20, -21, 19, -8, 5, -4, -7, 5, 20, 18, 3, 15, 21, -10, -9, 33, -31, -24, 28, -13, 10, 3, -3, 11, 19, 21, 14, 18, 34, -10, -3, 10, -47, -33, 29, -1, 5, -16, 8, 1, 3, 7, 
  6, 19, 10, 19, -8, -11, -8, -5, 51, -7, 5, -4, 39, 1, -7, 2, -6, 13, -2, -5, -6, 5, -11, -3, 28, -22, 0, 4, 35, 0, -2, 5, -1, 7, -6, 1, -8, 11, -10, 4, 29, -26, -7, 4, 31, -3, -9, 2, -1, 18, -3, 11, -7, 23, -5, -4, 36, -30, 5, 3, 37, -9, -9, 14, 1, 13, -2, 6, -3, 24, 4, 0, 41, -34, -1, 3, 43, 0, 4, 26, 3, 14, 8, 14, -7, 28, 5, 5, 37, -12, 5, 3, 40, 0, 5, 15, 0, 20, 4, 13, 0, 25, 2, 12, 42, -16, 2, 13, 46, 5, 6, 12, 9, 20, 19, 1, 6, 28, -7, 7, 47, -15, 9, 15, 47, 3, 1, 19, 5, 25, 19, 0, 5, 20, 2, 6, 34, -17, 19, 13, 31, 5, 0, 11, 2, 29, 19, 3, -5, 21, 13, -4, 41, -15, 18, 13, 31, 2, -1, 8, 0, 28, 22, 9, 0, 35, 14, 12, 40, -12, 17, 18, 36, 1, -1, 15, 4, 19, 22, 6, -3, 25, 18, 8, 36, -11, 17, 22, 42, 0, 10, 12, 1, 17, 17, 10, -12, 34, 6, 12, 33, -9, 12, 14, 40, -5, 10, 28, 0, 10, 21, 7, -17, 32, 11, 12, 23, -3, 8, 8, 46, -9, -1, 13, -5, 20, 7, 6, -9, 18, 15, 7, 34, -17, 17, 14, 54, -3, 7, 19, -2, 18, 2, 4, -4, 24, 10, 10, 31, -17, 17, 8, 35, -11, 4, 7, -2, 24, 14, 2, -3, 29, 7, 3, 32, -14, 19, 8, 40, -5, 11, 15, -6, 26, 8, 0, -9, 20, 17, 0, 41, -12, 19, 18, 45, -4, 11, 11, 6, 18, 10, 7, -8, 26, 7, 0, 44, -7, 17, 5, 38, 6, 4, 13, -1, 13, 2, 5, 4, 8, 5, 5, 34, -17, 15, 13, 36, 6, 2, 1, 0, 9, -3, -1, -3, 6, 2, 6, 41, -17, 11, 1, 37, 6, -1, 1, -2, 8, 4, 11, -7, 14, 4, 3, 33, -16, 17, -1, 29, -1, -5, 8, -8, 9, 6, 5, -2, 17, 2, 2, 42, -16, 11, -1, 37, 2, 11, 18, -6, 15, 1, 5, -3, 16, -2, -1, 34, -10, 24, 5, 28, 0, 0, 10, 7, 16, 8, 15, -4, 27, 1, 4, 38, -9, 14, -5, 25, 3, 3, 21, 5, 19, 10, 8, 8, 27, 3, 7, 51, -15, 10, -1, 30, 13, -1, 12, 5, 19, 0, 7, 7, 8, -3, 0, 45, -19, 6, -1, 35, 9, 1, 21, 13, 7, 7, 11, 7, 20, 6, 2, 42, -17, 5, 1, 35, 11, -3, 22, 13, 9, 11, 15, 8, 35, 21, 16, 51, -2, 10, 0, 46, 18, 8, 22, 11, 15, 2, 18, 4, 31, 16, 6, 40, 4, 14, 0, 42, 10, 3, 25, 9, -2, 0, 18, 1, 30, 3, 2, 41, -4, -3, -3, 37, 11, -3, 25, 13, 4, -6, 9, 2, 18, -10, -4, 47, -3, -4, 0, 46, 8, 4, 12, 10, 11, -7, 9, -3, 24, -4, -1, 34, -6, 12, 0, 44, 9, 0, 13, 14, 12, -4, 16, 5, 20, 0, -5, 39, -7, 6, 12, 47, 6, 1, 17, 9, 10, 14, 11, 5, 25, -2, -5, 32, -13, 11, 6, 43, 3, 14, 27, 0, 5, 9, 8, 2, 19, 3, 2, 33, -2, 5, -3, 31, 0, 15, 21, 7, 4, 5, 16, 4, 19, 1, 1, 29, -3, -6, 3, 28, 1, 7, 16, 8, 0, 5, 15, 10, 12, -3, 5, 30, -7, -2, -7, 32, 8, 5, 5, 2, 4, -8, 19, 5, 12, -7, 3, 28, 0, 7, 0, 32, 4, -3, 7, 12, 8, 8, 12, 4, 5, -4, -8, 25, -9, 6, -2, 39, 0, -1, 12, 10, 3, 2, 24, 6, 19, -10, -2, 29, -8, 3, 0, 34, -3, 0, 15, 12, 10, -11, 5, 13, -7, -22, -11, 18, 6, 5, -10, 36, -9, 8, 0, 
  7, 20, 15, -11, -12, -28, 6, -8, 35, 18, 8, 10, -56, -21, -21, -10, 0, 22, 26, -14, -10, 4, 7, -17, 16, 0, 3, 12, -63, -32, -5, 10, -15, 13, 23, -12, -5, 13, 14, -17, 29, 6, 6, 16, -51, -40, 0, 12, -13, 11, 25, -19, -18, 8, 19, -9, 22, 3, -6, 19, -27, -39, 1, 6, -6, 17, 19, -27, -13, 13, 17, -22, 29, 4, 8, 13, -44, -55, 13, 6, -8, 22, 13, -25, 3, 17, 9, -21, 19, -6, 1, 16, -38, -44, 24, 4, -16, 14, 27, -34, 1, 0, 2, -9, 7, -3, 6, 16, -36, -55, 22, -3, -17, 19, 19, -23, -8, -2, 5, -6, 4, 1, 11, 8, -38, -48, 7, -10, -22, 12, 15, -13, -11, 3, 3, -4, 10, 5, 12, 4, -41, -38, 9, -22, -2, 3, 19, -11, -2, 2, -5, 3, 8, -1, 15, -6, -40, -19, 10, -7, -1, 16, 33, -22, 6, 9, -14, -15, 28, -11, 15, -4, -50, -23, 16, -9, 8, 17, 48, -30, 3, 3, -24, -17, 26, -29, 12, -3, -57, -19, 6, -18, 4, 19, 46, -16, 14, -22, -31, -16, 15, -15, 11, -12, -45, -2, -8, -39, 30, -4, 43, -18, 27, -42, -30, -6, 27, -15, 7, -24, -56, 4, -17, -32, 41, -6, 41, 1, 47, -42, -28, -3, 36, -19, 2, -19, -49, 19, -20, -5, 55, 1, 51, 5, 47, -27, -34, -7, 41, 6, -1, -22, -41, 11, -24, -16, 37, 5, 41, 14, 36, -21, -28, -11, 42, 15, -1, -19, -48, 10, -24, -2, 31, -5, 36, 21, 24, -16, -22, -5, 36, 3, 3, -21, -41, 9, -18, 13, 6, -12, 31, 21, 8, -17, -14, -4, 31, 14, -9, -22, -60, 18, -23, -6, 7, -15, 23, -1, 5, 3, -1, -4, 14, 17, -26, -12, -52, 11, -19, -10, 7, 1, 24, 1, -9, 22, -3, -5, 30, 17, -24, -5, -11, 6, 0, 7, -8, -6, 9, -10, -25, 28, -7, -5, 26, 24, -15, -5, -32, -5, 3, 3, -16, -4, 19, -39, -32, 10, 10, -7, 30, 5, -13, 2, -37, -22, 18, 1, -25, -4, 7, -20, -29, 8, 16, 2, 17, 9, -14, -7, -24, -29, 14, -5, -22, -4, 6, -2, -23, 17, 14, 17, 10, 3, -5, -6, -17, -31, 18, 5, -9, -6, 15, -8, -19, 5, 6, 7, 8, 8, 1, 1, -32, -38, 20, -8, -12, 4, 9, -29, -14, 20, 15, -1, 9, -5, 12, 4, -26, -51, 23, 4, -6, 6, 18, -31, -9, 7, 20, -1, 3, -9, 28, 5, -43, -53, 21, -3, -10, 14, 15, -22, 3, 1, 11, 3, 1, -9, 28, 7, -38, -46, 3, -16, 5, 13, 18, -14, 5, 8, 3, 19, 7, 2, 23, -3, -48, -36, 9, -3, 7, 13, 25, -12, 18, 5, -5, 6, 24, 6, 27, -2, -52, -37, -3, -16, 13, 17, 30, -9, 19, 11, -9, 6, 17, 7, 29, -5, -90, -41, -4, -16, 2, 15, 34, -8, 21, -12, -9, 6, 33, 2, 18, -15, -79, -24, -3, -32, 10, 20, 32, 4, 21, -10, -6, 15, 28, 8, 19, -19, -69, -25, -9, -21, 15, 7, 47, 8, 11, -2, -13, 16, 32, 22, 11, -11, -39, -22, -8, -6, 10, 13, 27, 2, 11, 1, -10, 2, 31, 8, 1, -11, -48, -16, -24, -6, 10, 9, 32, -7, 1, 4, -8, 9, 32, 3, -1, -10, -23, -6, -10, 3, 8, 13, 23, -9, 3, 8, -10, 4, 28, 6, 1, 2, -9, -11, 3, 9, -7, 7, 26, -14, -9, 6, -10, -1, 22, 6, 2, -3, -28, -8, -7, -19, -6, 12, 27, -2, -13, -1, -5, 9, 24, 9, 8, -14, -37, -7, -8, -9, -5, 2, 20, -1, -9, 1, -4, 2, 28, 5, -4, -10, -28, 10, -18, -5, -20, 1, 15, -16, -12, -6, -10, 6, 28, 4, 14, -16, -46, 15, -2, 0, 
  -8, -23, 30, 11, 19, -21, -25, -8, -69, 1, -5, -9, -56, -6, 42, -52, 15, -25, 48, 11, 29, -96, 0, 8, -37, 7, 9, 6, -45, 11, -32, -49, 4, -16, 52, 16, 21, -88, -7, 11, -32, 1, -3, 6, -21, 5, -18, -3, 4, -1, 61, 10, 15, -67, -3, 3, -27, 14, -8, 6, -24, -5, -12, -3, 7, 5, 41, 10, 6, -49, -9, 3, -16, 7, -20, 0, -18, -4, -15, -5, 5, 8, 29, 5, 0, -27, -11, 0, -17, 1, -8, 5, -8, 1, -5, 17, -12, -9, -1, 1, -18, -7, 16, -3, -14, -6, -20, 1, -3, -7, 2, 28, -11, -4, 21, -1, -26, 8, 14, -4, 7, -13, -10, 0, 9, -10, 6, 29, -24, -14, 13, 7, -29, -1, 21, -22, 16, -25, -16, 12, 16, -13, -8, 6, -15, 7, -5, 6, -34, 0, 16, -20, 22, -34, -8, 36, 34, -19, -2, -1, -19, 22, 2, -4, -39, 15, 9, -25, 24, -43, -3, 42, 26, -5, 0, -7, -17, 21, 1, -10, -37, 13, -6, -12, 16, -38, -10, 37, 23, -11, 1, -7, -15, 22, 3, -2, -31, 21, -14, -2, -1, -24, 4, 26, 14, -10, 4, -5, -18, 24, 5, -6, -17, 22, -14, 3, -9, -29, 7, 18, 18, -15, 11, 3, -21, 20, -4, -6, -15, 6, -22, 9, -25, -11, 7, 9, 2, -20, 14, -2, -4, 14, -14, -1, 14, -4, -24, 19, -40, 5, 6, 4, -3, -17, -1, -20, -2, 6, 16, -5, 27, -15, -40, 22, -34, 20, 10, 12, -20, -10, -1, -26, 15, -2, 22, 9, 29, -47, -72, 18, -22, 35, 25, 13, -24, 5, -9, -28, 18, 1, 47, 10, 32, -66, -65, 3, -14, 31, 34, 1, -46, 5, -23, -33, 21, -8, 28, 9, 35, -65, -59, -10, -10, 44, 27, -5, -6, 13, -28, -28, 14, -9, 23, 21, 34, -68, -61, -8, -25, 46, 27, -9, 2, 21, -16, -4, 10, -4, 19, 15, 28, -34, -49, -13, -12, 34, 6, -21, -11, 22, -10, -7, 16, -2, 15, 21, 24, -28, -20, -4, -5, 32, 0, -33, -37, 20, -9, 7, 8, -4, 22, 20, 12, -54, 11, -1, 9, 18, -18, -18, -31, 21, -5, 12, -4, -15, 24, 22, -6, -40, 19, 6, 4, -2, -26, -5, 12, 18, 15, 15, -16, -15, 21, 24, -30, -3, 13, 12, -11, -22, -47, 11, 39, 7, 17, 11, -13, -16, 16, 4, -47, 9, 15, -10, -1, -30, -44, 22, 33, 11, 16, 5, -22, -1, 23, -12, -46, 12, 10, -18, 8, -29, -19, 7, 41, 4, 17, 17, -21, 1, 10, -3, -44, 28, -3, -9, 3, -35, -17, 3, 38, 1, 10, 16, -25, 9, 18, 1, -36, 24, -8, -4, 3, -27, -14, 6, 36, -20, 10, 16, -16, 14, 22, -1, -26, 18, -1, 0, -10, -17, 4, 11, 21, -14, 5, -6, -18, 13, 20, -2, -12, -1, 0, 2, -12, -9, 9, 15, 3, -8, -1, -21, -11, 9, 12, -1, -8, -4, 7, 12, -27, -4, 1, 16, 4, 6, -1, -24, -4, 4, 13, 7, -2, -7, -6, 4, -15, 6, 9, 22, 7, 6, 3, -22, -2, 2, -6, -2, 12, -17, -13, 20, -16, 7, 23, 30, -23, 6, 2, -25, 9, 1, 5, -9, 27, -27, -15, 12, -15, 31, 27, 14, -24, 3, -12, -31, 18, -6, 11, -5, 42, -18, -11, 3, -9, 27, 19, -2, -8, 0, -26, -16, 17, -15, 22, -12, 44, -19, -19, -10, -9, 34, 5, -6, 2, -8, -20, -20, 22, -24, 7, -4, 39, -21, -19, -12, 3, 38, -8, -14, -14, 0, -33, -25, 26, -7, 31, 12, 41, -30, -5, -16, -5, 25, -12, -8, -2, 3, -13, -18, 10, -11, 40, 13, 27, -43, 3, -15, -5, 33, 4, -3, -4, 1, -17, -29, 4, -21, 29, 26, 31, 11, -20, -8, -15, 8, -14, 2, 13, 21, 19, 11, 
  -14, -31, -13, -8, -18, 5, 24, -6, -13, 4, 16, 3, 26, 16, 8, 1, -21, -46, -3, -12, -8, 3, 13, -5, -14, -1, 5, 8, 19, 21, -5, 3, -8, -35, -10, -8, 1, 1, 12, -3, -18, -10, 5, 3, 23, 25, -5, 4, -14, -35, -6, -30, -3, 0, 10, 3, -22, -7, 0, 12, 13, 17, -5, 0, -13, -40, -26, -21, -2, 9, 1, -8, -24, -1, -5, 7, 25, 18, 0, 14, -7, -48, -16, -7, -4, 4, 6, 3, -27, 7, 5, -7, 18, 20, -4, 17, -10, -45, -3, -12, -2, -2, -1, -6, -27, 6, -12, -2, 19, 21, 1, 12, -16, -52, -18, 0, -5, -8, 4, 9, -26, 4, -4, -3, 30, 23, -6, 1, -8, -47, -6, -11, 1, 2, 4, 7, -20, 5, -5, -4, 28, 25, -2, -2, 0, -35, -11, -1, 0, 1, 17, -1, -18, 12, 12, -3, 33, 28, -10, 2, -7, -42, -27, -9, -2, -1, -2, 0, -15, 4, 6, -4, 19, 33, -10, 7, -9, -39, -27, 4, -7, 3, -3, -4, -26, 2, 14, -2, 15, 25, 0, 13, -15, -45, -25, -8, -9, 6, 3, -2, -26, 6, 1, 3, 17, 25, 0, 15, -9, -49, -25, -2, -13, -1, -1, -3, -5, 0, 4, -10, 30, 22, 7, 16, -9, -44, -9, 4, -7, -3, -4, -5, -12, -5, 10, -4, 27, 25, 5, 13, -16, -46, -4, 8, -15, -4, -2, -1, -12, -10, 12, 2, 32, 32, 2, 9, -15, -46, 7, 6, -9, 4, -8, 3, -7, 5, 9, -12, 15, 29, -3, 11, -21, -47, -12, 11, -4, 7, -4, -8, -4, 0, -4, -15, 18, 26, -5, 8, -24, -48, -26, 2, -15, 9, 9, -1, 2, 12, 2, -13, 20, 24, -7, 3, -2, -52, -29, 5, -15, 17, -7, 8, -12, 28, 13, -1, 17, 30, -4, 2, -8, -27, -16, 17, -11, 1, -2, 13, 1, 9, 19, -2, 20, 19, -2, 10, -14, -34, -26, 8, -15, 16, 6, -3, 4, 18, -9, -7, 27, 15, -4, 25, -14, -40, -15, 3, -23, 14, 10, -5, -7, 22, -13, 3, 15, 17, -1, 15, -18, -47, -22, 19, -18, 17, 7, 6, -5, 18, -21, -1, 18, 26, -9, 9, -14, -54, -11, 27, -19, 10, 10, 0, 5, 24, -48, 3, 28, 30, -5, 13, -9, -66, 3, 17, -20, 11, 2, 4, 8, 24, -26, -15, 26, 34, -7, 6, -22, -59, -16, 15, -18, 12, 14, 3, 5, 14, -14, -5, 24, 23, -4, 10, -26, -58, -36, 15, -29, 16, 2, 7, 4, 17, -14, -11, 24, 25, 4, 15, -26, -58, -8, 19, -34, 24, 8, 6, 3, 31, 8, 7, 22, 28, 6, 6, -21, -49, -18, 25, -26, 19, 10, 14, 9, 26, -7, 0, 27, 27, 5, 20, -32, -56, -14, 21, -28, 23, 18, 10, 4, 36, -24, 6, 18, 29, -3, 9, -31, -58, -8, 21, -28, 11, 5, 2, -3, 22, -23, 6, 20, 23, -10, 9, -22, -49, -31, 17, -27, 28, -3, 4, -11, 25, -7, 8, 19, 21, -5, 9, -24, -47, -27, 19, -23, 32, 2, -7, -1, 19, -13, 4, 21, 21, -6, 10, -28, -42, -32, 10, -21, 28, 0, -6, -10, 28, -17, -2, 5, 25, -5, 4, -30, -46, -37, 7, -24, 16, 11, -2, 6, 24, -11, 3, 14, 30, -4, 2, -18, -34, -33, 12, -24, 11, 5, 0, -3, 14, -10, -4, 20, 30, -5, 12, -24, -46, -25, -2, -31, 21, 0, 8, 2, 9, -8, -1, 22, 26, -2, 10, -22, -28, -7, 11, -18, 25, 11, 0, 3, 14, -7, 5, 26, 22, -13, 7, -27, -29, -24, 2, -20, 20, 15, -8, -5, 7, -18, 3, 33, 23, -13, 9, -22, -28, -11, 1, -17, 19, 16, 0, -3, 1, 6, 9, 26, 24, -7, 6, -24, -5, -18, -5, -21, 17, 4, -10, -5, 8, 20, -4, 19, 23, -10, -10, 
  11, -31, 11, 5, -2, -17, -27, -21, 35, -5, -48, -23, 3, 25, -14, -18, 11, -19, 5, -3, -10, 11, -16, -30, 29, 0, -33, -12, 18, 26, 5, 8, 19, -13, -5, 1, -18, 20, -25, -21, 16, -10, -19, -10, 19, 8, 8, 16, 23, 6, 21, -4, -12, 23, -19, -23, 28, 7, -4, 12, 18, 2, 32, 22, 23, 19, 19, -9, 1, 30, -10, -5, 29, 12, 9, 14, 30, -8, 24, 15, 15, 23, 12, -14, -5, 38, -13, -8, 26, 8, 3, 17, 23, -17, 21, 10, 11, 8, 18, -21, -10, 27, -10, -13, 25, 8, 5, -4, 11, -15, 10, 12, 2, 0, 13, -23, -13, 25, 11, -19, 14, 1, 6, -4, 6, -9, 7, -2, 1, -8, 13, -19, -16, 33, 7, -6, 17, 20, 1, -3, 5, -11, 4, -3, 2, -11, 16, -22, -11, 37, 6, -16, 10, 18, 11, 3, 6, -19, 6, -9, -2, -19, 19, -20, -17, 22, 10, -17, 10, 10, 7, -4, 23, -11, 9, -11, -6, -38, 2, -12, -33, 28, 10, -14, 4, 21, -2, -21, 29, -14, 7, -6, 8, -36, 2, -7, -27, 10, -10, -12, 0, 30, 3, -23, 21, -4, 2, 12, 21, -11, 3, -11, -9, 8, -2, -27, 21, 8, 0, -21, 13, 4, 1, 3, 30, -3, 7, -15, 0, 6, -3, -14, 13, 8, 6, -21, -4, 2, 0, 5, 20, 0, 10, -4, -2, 16, -7, -8, 19, 13, 13, -15, 2, -10, 0, 8, 6, -4, 5, 2, -8, 11, 0, -9, 15, 9, -2, -6, 17, -17, -1, 3, 12, -16, -13, -11, -18, 16, 11, -17, 4, 0, -18, -4, 9, -11, 2, 7, 20, 1, 4, -3, -13, 9, 5, -11, 23, -9, -16, 11, 22, -1, 10, 12, -1, -1, -1, -14, -14, 14, 5, -16, 24, -15, -26, 7, 30, 5, 17, 14, 6, -10, 3, -7, -23, 24, -3, -20, 33, -9, -19, 10, 31, -11, 23, 26, 18, 9, 20, -7, -5, 24, 5, -14, 36, -2, -1, 6, 18, -9, 19, 14, 14, 17, 28, 13, -9, 27, -8, 15, 37, 10, 13, 11, 19, -8, 22, 9, 22, 17, 34, 8, -3, 24, -2, 24, 29, 16, 15, 10, 8, -19, 22, 14, 16, 12, 24, 2, -3, 29, -5, 10, 42, 17, 20, -1, 16, -14, 7, 10, -5, 5, -2, -10, -16, 20, 6, 1, 26, 10, 6, -6, 12, -7, 3, 9, 5, -18, -7, 10, -19, 24, 10, 17, 21, 28, 6, 10, 17, -5, 20, 4, -8, -11, 7, -1, -23, 11, 19, 8, 14, 44, 6, 12, 24, -15, 7, -12, -2, -15, 0, -10, -24, 12, 9, 2, -4, 26, -4, 9, 10, -13, 0, -15, 8, -35, -11, -6, -24, 8, 12, -5, 3, 27, -19, -5, 17, -8, -8, -4, 0, -39, -2, 7, -23, 4, 9, 7, 10, 43, 5, -12, 28, 2, 1, -5, 5, -16, 2, 7, -11, 2, 21, 8, 8, 10, 23, -11, 10, 7, -12, -7, 9, -24, 5, 14, -1, -11, 26, 15, 31, 22, 13, -19, 18, 18, -10, 0, 16, -13, 8, 10, -4, 6, 10, 5, 22, 25, -3, -11, 25, 16, 17, 17, 16, -27, -7, 6, -13, 2, 21, 14, 19, 24, -19, -4, 31, 12, 10, 9, 7, -24, -26, 7, -16, 6, 19, 5, 4, 19, -23, -3, 26, 1, 16, 7, 23, -4, 6, 2, -4, -1, -1, -5, 22, 14, -10, -7, 33, 7, 6, -1, 0, 8, 20, -4, -10, 5, 0, -5, 29, -5, -4, 1, 26, -10, -3, -3, 24, 27, 22, -1, -7, 22, -12, -8, 35, 8, -7, 11, 37, -14, 21, 12, 6, 31, 30, -15, 1, 25, -35, 3, 36, 6, 4, 7, 22, -16, 19, 16, 10, 16, 18, -2, -10, 17, -26, 6, 33, -9, 2, 2, 12, -15, 10, 9, 24, 10, 17, 11, -4, 13, -27, 1, 29, 0, 9, -11, 18, -6, -2, -3, 
  0, -2, -5, -3, 2, -4, -5, -3, -3, 4, 3, -4, -2, -1, 2, -1, -2, -5, -5, 2, -3, 2, 3, 1, -1, -5, -4, -5, 0, 0, 2, -5, -4, -2, -1, -2, 3, -2, -3, -4, -3, 2, -2, 2, -3, -2, 0, 3, -4, 0, 1, 2, 2, -4, 6, -3, 4, -6, -5, 1, -2, 3, -3, -4, 2, -4, -1, -2, -4, -4, -4, 2, -2, -1, 1, -4, 3, -2, 2, -3, -4, -5, -4, 2, 1, 2, -5, -1, -5, 1, 4, -2, 1, 3, -5, -2, 3, -1, 0, 3, -2, -4, -5, -4, -4, 4, -5, -3, 2, 3, -1, -2, 1, -5, 2, 2, -5, -5, 2, -1, 2, 2, 4, 3, 2, -3, -2, 2, -1, -3, -2, 2, 2, -4, 2, 0, 2, -5, -4, -3, -1, -4, -3, 1, 2, 4, -1, -1, 4, -3, -2, 2, 3, 2, 4, 2, -1, 2, -3, -4, 2, -5, -4, -3, 0, -6, -1, 3, -4, -3, 1, -3, -1, 1, 0, 2, -4, 5, -5, 1, -2, 2, -1, -2, 0, -1, -5, -3, 1, -3, -1, -6, -1, -4, 4, 3, 0, -1, -3, -5, -1, 0, 3, -4, 4, 2, 3, 1, -3, -4, -3, -2, 0, 4, 1, -5, 4, 0, 4, 0, 2, -2, 0, -3, 3, -4, 0, 3, -5, -5, -1, 1, 0, 4, 0, 4, -2, 3, 1, -5, 1, -2, -4, 0, 1, 3, -6, 0, -1, -4, 0, 0, 0, -1, -1, -5, 0, -1, -2, 1, 0, 2, -1, 4, -4, 5, 1, -3, 4, -6, 3, 1, -4, -2, -2, 3, 2, 2, -4, -4, 4, 0, -6, 0, -5, -3, -1, -1, 0, -1, 3, -2, -2, 1, 1, -1, 3, -3, 0, 1, -5, -5, -6, -3, 1, 0, 1, -4, 4, -2, -2, 2, -6, 1, 3, 1, -1, 1, 0, 2, 2, -1, 3, -4, -2, 5, -3, -2, 1, 1, 5, -5, -6, -1, 0, -1, 4, 0, -3, -5, -1, 1, -3, -6, 1, 4, 3, -3, 1, 2, -5, -5, 1, 5, 3, -3, 4, 2, 2, 1, -1, 5, 0, 4, -5, 3, -4, -2, -5, -4, 2, -1, 2, 1, -2, 0, -5, 4, 0, 3, 4, -6, 1, 0, -4, -4, -2, -6, 2, 0, -5, 1, -4, 3, -2, -1, -4, -3, -2, 1, -4, -1, -3, -3, -3, 0, -4, -1, 1, -1, -1, -5, -2, 1, 0, -3, -5, 2, -2, 2, 2, 2, 4, -4, -2, -2, 1, -3, 0, -3, 2, -3, -1, 0, -4, 1, 0, 3, 5, -3, 1, 3, -4, -3, 0, 2, 1, -6, 4, -1, -4, -2, -1, 1, -1, -2, -3, -5, 4, 4, 1, 2, -6, 4, -4, 1, 2, -5, -4, -1, 5, -4, -5, 0, 5, -4, 3, 1, 3, -2, 2, -3, -3, 4, -1, -1, -2, -1, 3, -2, -2, -5, 1, -3, 0, -1, 4, -2, 3, -2, 3, -3, -3, 2, -5, 1, -2, 2, 4, -1, 0, -4, -4, -2, -3, -3, -1, 5, 4, -5, 1, 0, 0, -2, 2, -5, 3, -4, 0, -1, 1, -2, -3, 1, 2, -2, -4, -3, -2, -3, 1, -2, -3, -4, -4, -4, 3, -1, 2, -2, -1, 3, -1, -3, 5, 1, 4, 1, 2, -1, -3, 4, -5, -1, 1, -1, 4, 4, 0, -3, -1, 1, -1, 2, 0, -1, -4, 1, 3, -4, -2, -5, 0, 4, -2, 4, -3, -1, 3, -4, 0, 0, 4, 1, -4, -4, -4, -4, -4, -3, -6, 0, -5, 0, -5, 0, -1, 1, 2, -1, 0, 2, 1, -6, -2, 3, 4, 2, -2, -5, -3, 2, -5, -3, 4, 2, 3, -5, -4, -2, 3, 3, -4, -3, -3, 5, 0, -1, -4, -1, 3, -3, -2, 2, 2, 4, 3, -1, -4, -3, 1, 3, 4, -4, 0, -5, 0, -5, -3, -1, -1, -3, -1, -2, 2, -2, -2, -4, 3, -3, -5, 4, 
  2, -3, -19, 30, -19, 5, 25, 31, 6, -5, -28, 19, 4, 11, 6, 11, -10, -32, -14, 30, -31, -13, 23, 24, 6, -4, -27, -5, -17, 5, 28, 9, 5, -23, -3, 8, -16, 2, 19, 8, 29, -4, -26, 8, 2, -3, 20, -5, 1, -14, -5, -14, -3, -17, 2, -25, 36, -19, -13, 12, -18, -17, 6, -25, -1, 6, -6, -14, 1, -2, -6, -53, 39, -13, -14, 15, -18, -16, 16, -11, 8, 3, 16, -9, -6, -4, -7, -33, 24, -20, 15, 23, -13, -5, 5, -2, 5, 4, 16, 11, -2, -5, -6, -8, 19, -17, 18, 12, -16, 10, 7, 2, 20, 5, 7, 21, -7, -4, -18, 13, 14, -4, 21, -2, -2, 7, -5, 5, -2, 11, 0, 6, -8, -5, 4, 9, 6, -1, 5, -1, -1, 14, 8, 9, -12, 9, -25, 12, -13, -8, 10, 16, 24, -11, -21, -12, -25, 4, 9, 17, -1, -6, -39, -16, -5, -7, 47, 14, 18, -10, -32, -1, -26, 0, 29, 1, 9, -46, -28, -15, 4, -23, 44, -4, 47, -13, -31, 21, -36, -7, 9, -7, -6, -43, -3, -18, 3, 1, 22, -27, 46, -24, -33, 29, -26, -41, 27, 2, -29, -23, -36, -7, -27, -22, 1, -28, 33, -39, -37, 31, -19, -32, 16, -3, 1, -27, -3, 12, -21, -6, -16, -31, 26, -28, -14, 4, -3, 6, -3, -5, 2, -3, 18, 5, -3, -29, -10, -15, 7, -26, 36, 9, -16, 7, -5, -7, 11, 13, 15, 26, 9, -19, -15, 19, 4, 1, 34, -17, -17, 23, 4, 8, 19, 16, 1, 41, 17, 1, 14, 30, 21, 11, 11, -33, -19, 15, -10, 12, 16, 1, -12, 23, 6, 17, 30, 21, 8, 10, -23, -21, 0, 1, 1, 12, 11, -2, -15, 10, 12, 9, 44, 15, 17, -6, -30, 4, 1, -3, 11, 15, -11, -12, -13, -13, -3, -9, 55, -3, 65, -39, -35, 25, -11, -19, 0, -8, -21, -16, -17, -59, -11, 21, 23, -62, 23, -65, -38, 21, -32, -44, 33, 2, -1, -6, -3, 2, -17, 6, -14, 3, 25, -23, 5, 18, -5, -24, 27, 6, 3, 8, 13, 36, -7, -23, -17, 21, 30, -17, 35, 22, -1, -5, 9, -7, 13, -3, 23, 39, 2, -22, -15, 44, 21, -8, 28, -3, -15, 29, -11, -21, 13, 5, 19, 36, 4, -15, -6, 21, 18, 3, 18, -7, -2, 25, -27, -12, -2, 0, -10, 17, -2, -7, 3, 8, 15, 7, -9, -9, -12, 17, -10, -7, -3, 4, -15, -10, -15, 3, 26, 8, 12, -6, -14, -9, -11, -4, 12, 17, -9, -12, -57, -27, -7, 17, 42, 7, 27, -28, -30, 8, -27, -22, 22, 6, -30, -27, -35, -30, -14, -37, 49, -21, 24, -37, -21, 44, -24, -37, 38, 3, -50, -31, -18, -14, -35, -43, 34, -17, 5, -22, -9, 45, -10, -37, 44, -5, -24, -25, -40, 19, -41, -18, 6, 8, 13, -15, -16, 18, 5, -11, 23, -5, -5, -16, -20, 23, -16, -16, -12, 18, 11, -10, 2, -6, -3, -1, -8, -25, 4, -9, 9, 10, -2, -8, -5, 25, 0, -8, 35, -8, -27, 26, 2, -8, 14, -2, -5, -2, -1, -17, 27, 15, 16, -1, 32, -8, -31, 15, -13, -14, 3, 0, -4, 2, 4, -11, 28, 19, 13, -1, 24, -15, -30, 3, -2, 8, 1, -6, -27, 12, -5, -14, 31, 22, -5, -2, -3, -2, -8, -10, 9, 1, -18, -2, -25, 14, -20, -8, 32, 22, 13, -12, -13, 12, 18, -20, 21, 1, -29, 10, -44, -2, -30, -10, 20, 5, 21, -26, -15, 14, 19, -32, 22, -2, -32, 1, -5, -13, -36, -14, 8, -15, 25, -44, 3, 24, -8, -26, 33, -7, 3, 8, 24, -15, -8, -31, -26, 3, 15, -40, 19, 11, -9, -9, 11, -11, 17, 9, -9, -1, 5, 0, -15, 21, -1, 17, 9, -2, -51, 1, -19, -7, 
  -3, -29, -2, 7, -24, -22, -5, -15, 83, 18, 1, -19, 22, 18, -8, 18, -5, -11, -18, 3, -6, -5, 6, -11, 50, -6, -2, 1, 12, 20, 37, 23, 0, -4, -15, 4, -11, -14, 0, 1, 50, -5, 6, 4, 6, 22, 18, 22, -11, 5, -16, 9, -7, -18, -2, 0, 55, 3, 9, 6, 27, 15, 18, 10, -3, 12, -10, 18, -6, -13, -9, 3, 54, 2, 11, 15, 17, 15, 15, 12, -1, 20, -14, 15, -2, -23, -7, 7, 45, 0, 8, 18, 10, 16, 14, 9, -1, 17, -11, 17, -1, -26, -10, 9, 40, -6, -7, 22, 17, 13, 14, 8, 5, 17, 1, 15, -5, -20, -19, 16, 45, -7, -11, 16, 16, 14, 23, 10, -1, 18, 14, 14, -1, -30, -6, 8, 40, -9, -10, 25, 15, 11, 15, 7, 4, 19, 2, 25, 1, -21, 1, -1, 47, -5, -4, 18, 8, 11, 18, 0, -2, 8, 6, 15, -4, -11, 4, 3, 38, 4, 1, 21, 13, 11, 11, 1, -4, 3, 4, 6, -6, -16, -4, 0, 42, -7, 4, 16, 10, 12, 20, -2, -6, -5, -8, 7, -9, 0, -2, 0, 32, 0, 1, 10, 19, 7, 22, 4, -11, -9, -9, 13, -11, -1, -4, 1, 29, 2, 5, 10, -1, 6, 12, -11, -8, -8, -13, 23, -5, -21, 1, 5, 28, 7, -6, 16, 11, 3, 9, -11, -9, 1, -8, 6, -4, -20, -1, 2, 30, 5, 2, 6, -7, -5, 10, -6, -3, -2, -4, -2, -5, -17, 5, -5, 28, 4, 6, 9, 0, 3, 8, -11, -7, 5, -7, -2, 2, -13, 2, -11, 37, 3, 4, 9, 12, 6, 4, -15, -7, -6, -20, -5, -6, -16, 4, -12, 38, -1, -2, -5, -2, 6, 3, -21, -13, -3, -12, -5, 2, -39, 10, -8, 30, -10, -1, 7, -6, 7, -3, -29, -12, -17, -11, 7, -4, -34, 9, 1, 43, -5, -4, 0, -5, 17, 4, -21, -13, -17, -23, 3, -5, -39, 4, -3, 43, 2, -2, -4, -2, 14, 7, -12, -6, -15, -18, -6, -7, -25, 1, -2, 34, 6, -9, 1, -6, 10, 19, 4, -12, -11, -19, -5, -7, -24, -5, -13, 41, 10, 2, 7, -3, 14, 13, -7, -6, 1, -18, -7, -8, -8, -5, -4, 47, -2, 4, 16, -11, 7, 26, 13, -10, -8, -15, -6, -3, -6, -1, -2, 61, 3, -1, 13, -10, 5, 26, 1, -6, -1, -4, -4, -7, -21, 6, -3, 57, -7, 13, 16, 1, 2, 16, 13, -6, -11, -12, -10, -4, -21, 5, -3, 50, -3, 13, 9, 4, 2, 30, 14, -4, -5, -8, 4, -5, 1, 10, 1, 42, 2, 14, 21, 5, 2, 32, 0, -16, -12, -15, 5, -7, -11, 12, 10, 42, 10, 12, 15, 12, 3, 17, 0, -2, -17, -15, 4, -8, -4, 11, 5, 48, 11, 3, 12, 8, 4, 1, 2, 4, -23, -19, 5, -2, -3, 4, 6, 65, 17, 0, 8, -10, 6, 19, 0, 7, -11, -28, -4, 3, -12, -12, 2, 57, 9, 17, 15, -2, 4, 13, 7, 13, -10, -16, -10, 5, -14, -5, -4, 55, 20, 15, 17, 9, 1, 14, -7, 10, -1, -16, 0, 11, -13, 0, -2, 39, 12, 14, 11, 4, -6, 18, 8, 2, -10, -8, 1, 7, -18, 6, 6, 47, 16, 10, 16, -8, -7, 28, -7, 5, -5, -20, 3, 7, -13, 15, 3, 52, 8, 10, 19, -19, 0, 9, 2, 12, -5, -7, -2, 6, -30, 8, -5, 48, 0, 4, 22, -22, 2, 18, -4, 4, -19, -22, 2, 6, -23, 1, 6, 46, -1, -1, 23, -21, 1, 22, 0, 7, -14, -19, -3, -3, -19, 9, 9, 40, -8, -4, 14, -4, -3, 24, 15, 21, -3, -18, -2, 2, 0, 6, -2, 31, 5, 15, 21, -7, -8, 38, 33, 10, -5, -11, -25, -12, -14, 17, 16, 53, 19, 11, -10, 21, -15, 1, -9, 
  2, -9, 9, -1, -2, -11, -18, -11, -9, 0, -32, -30, 11, -12, -9, -5, 17, -8, 15, 4, 12, 19, -11, -6, -9, 11, -12, -20, 30, 3, 12, 17, 17, -6, 1, -3, -1, 16, -17, -4, -9, -2, -12, -18, 22, -4, -5, 12, 8, -3, 3, 0, 5, 1, -10, -8, 5, -1, -14, -20, 31, -7, 0, 13, 8, -6, -9, -31, -11, 23, -15, -17, -19, -8, -13, -25, 26, -20, -7, 13, 9, -5, -7, -17, -19, 14, 1, -6, -12, -5, 3, -17, 29, -29, -7, 20, 1, -13, -7, -6, -4, 14, 0, -1, -22, -1, -11, -30, 31, -9, -4, 27, 7, -4, 9, -11, -8, 17, -1, -9, -15, 0, 1, -23, 37, -3, 19, 23, 2, -6, 3, -8, -7, 7, -5, -9, -5, -7, -5, -31, 38, -6, 5, 13, -16, -19, -1, -11, -12, 8, -1, -4, -12, -3, 10, -27, 23, -20, -7, 6, -15, -14, 9, -15, -22, 18, 14, -4, -26, 10, 10, -15, 40, -17, -7, 5, -9, 3, 1, -36, -26, 3, 11, -8, -22, 6, 9, -17, 41, -29, -9, -5, -15, -10, -6, -23, -15, -1, 3, -10, -22, 5, 6, -14, 21, -32, -3, 2, 9, 5, 2, -9, -9, 20, -8, -4, -34, 12, 5, -21, 27, -23, 5, 26, 24, 8, 6, -4, 11, 21, -12, 10, 15, 12, 17, -19, 37, -5, 9, 19, 11, 3, 7, 5, -1, 10, 2, 15, 23, 5, 8, -16, 28, -10, 6, 23, 2, -12, 5, -3, -14, 14, 2, -2, -2, 15, 4, -26, 24, -11, 3, 8, -10, -9, 8, -14, -12, 8, 10, -3, -13, 20, -13, -13, 29, -23, -5, -7, 2, 0, -3, -27, -14, 19, 5, -11, -6, 8, -8, -26, 31, -25, -11, -7, 12, 12, 19, -20, 4, 32, 3, -5, -2, 4, 13, -4, 35, -16, 6, 20, 15, 5, 39, -14, 10, 18, 10, -1, 8, 12, 6, -5, 36, -10, -1, 19, 8, -8, 13, -5, -7, 8, 0, 2, -6, 12, -7, -18, 31, -9, -2, 18, -2, -7, 8, 4, -12, 10, 3, 12, 6, 18, -9, -9, 30, 4, 1, 12, 1, -9, 11, -8, -12, 8, -5, 1, 6, 10, -5, -15, 19, -8, -4, 8, 1, -2, 6, -22, -19, 18, 1, -5, -8, 3, 8, -21, 23, -8, 1, 23, -1, 9, 14, -32, -11, 27, 13, -12, -1, 12, 16, -2, 18, -24, 4, 25, -7, 15, 7, -24, -14, 10, 15, -12, -4, 0, -1, -4, 22, -10, 0, 22, 9, 3, 18, 1, -5, 20, 18, -7, 9, -6, 4, -3, 33, -5, 3, 27, -2, 4, 15, -3, -8, 28, 15, -1, 18, 2, 16, -4, 37, 3, 4, 28, -7, 21, 8, -19, -19, 22, 15, 8, 6, 27, 21, 4, 22, -23, -4, 12, -10, 12, 6, -27, -13, 18, 21, -5, -7, 10, 16, 1, 11, -23, 15, 13, -6, 10, 6, -20, -11, 15, 17, -2, -3, 12, 22, -1, 23, -34, 11, 10, -13, 18, 0, -3, -9, 5, 7, 8, -1, 12, 14, -10, 23, -19, 10, 11, 2, 12, -7, -7, -7, 17, 6, 7, 6, 15, 0, -11, 30, -12, 9, 19, 10, 17, 10, -8, 5, 15, 18, 6, 1, 12, 16, -6, 8, -13, 8, 11, 5, 18, 11, -6, 5, 6, 16, 18, 9, 21, 15, 4, 12, -11, 2, 9, 0, 1, 8, -1, -9, 17, 7, 14, -7, 20, 5, -14, 15, -20, 9, 2, 1, 1, 10, -8, -3, 4, 15, 2, -11, 10, -1, -7, 8, -23, -10, -1, 1, -5, 7, 2, -1, 14, 10, 7, 1, 14, 11, -11, 13, -13, 4, 9, 19, -13, 19, 8, 14, 3, -3, 1, 15, 2, -12, -24, 46, 13, 17, 23, 11, -9, 15, 16, 5, 25, -3, 0, 19, 12, -15, -24, 45, 11, 15, 18, 0, -2, -4, -4, -4, -5, -9, -4, 12, -2, -4, -16, 26, -4, 9, 18, 
  9, -17, 13, -13, -1, 1, 7, -26, 33, -4, -26, 1, -3, -31, -22, -14, 5, -7, 17, -20, 8, -9, -1, -41, 45, -10, 3, 0, 1, -12, 1, -16, 16, -2, 20, -7, 8, -6, 8, -37, 34, -6, 15, -4, 3, 2, 1, -1, 16, -2, 25, -2, 15, -10, 6, -26, 26, -21, 22, 0, -21, 13, 1, 8, 13, 6, 21, 11, 2, -3, 1, -1, 12, -19, 17, 0, -16, 16, 7, 13, 4, 2, 22, 17, -12, -2, 0, 28, 2, 3, 8, 6, -11, 7, 4, 7, -6, -5, -21, 29, -16, -3, 13, 40, 10, 8, -39, -3, -15, 4, 18, 16, -6, -21, -38, -2, -19, 8, 25, 17, 22, 10, -30, 5, -14, -9, 26, 1, 9, -18, -21, -18, -4, 3, 12, -21, 44, -25, -25, 8, -23, -19, 1, -18, 1, -7, -4, -30, 11, 3, 10, -37, 35, -26, -12, 19, -23, -32, 15, -13, -5, -7, -3, -13, -8, 8, 4, -33, 31, -8, 3, 13, -17, -22, 5, -7, 6, -2, 26, 3, -5, -5, -8, -32, 13, -10, 26, 16, -15, -3, -4, -10, 9, -1, 21, 22, -4, -10, -17, -7, 10, 12, 27, 2, -10, 10, -6, 5, 11, 5, 13, 25, -8, -16, -2, 12, -2, 11, 21, -13, -10, 7, 5, 11, 10, 10, -3, 23, 9, -18, 13, 16, 9, 8, -8, -15, -7, 23, -4, 3, 4, -5, -31, 7, 10, -15, 32, 11, 27, 9, -33, -20, -11, 18, 0, 21, 7, -32, -39, -11, 13, -5, 52, 4, 26, -15, -56, 0, 7, -5, 18, 8, -5, -34, -5, -30, 4, -18, 53, -10, 56, -25, -48, 30, 4, -35, 24, 4, -35, -25, -38, -31, -18, 22, 27, -32, 21, -33, -35, 39, -29, -61, 31, 2, -4, -20, -9, 6, -28, 3, -7, -29, 37, -27, -17, 26, -16, -12, 19, -2, -4, -12, 19, 24, -18, -24, -17, 2, 24, -11, 20, 19, -16, 1, 3, -18, 7, -2, 21, 24, -8, -5, -8, 19, 11, 6, 29, -15, -25, 24, 4, -1, 18, 13, 16, 21, 0, -5, 1, 25, 18, 10, 29, -13, -5, 23, -9, -1, 12, 15, 6, 18, 9, -10, 25, 24, 15, -7, -14, -5, -12, 21, -12, -1, 3, 7, -20, -13, 0, 2, 43, 0, 23, -4, -25, -3, -12, -10, 15, 17, -20, -18, -36, -13, -5, 18, 47, -1, 36, -25, -38, 11, 5, -32, 17, 7, -42, -28, -32, -36, -30, 10, 29, -25, 30, -28, -59, 30, -30, -72, 35, 7, -8, -11, 4, -22, -20, 21, -4, -43, 12, -22, -15, 22, -30, -49, 42, -1, 2, -5, 12, 15, -18, -1, -18, -1, 28, -12, 16, 24, -9, 1, 15, -3, 7, -2, 26, 32, -1, -13, -26, 21, 19, 8, 31, 11, -22, 12, -5, -9, 18, -8, 16, 26, 4, -11, 1, 25, 12, 2, 24, -15, -20, 28, -9, -10, 1, -8, 13, 11, -3, -18, 21, 5, 21, 9, 14, -12, -22, 18, -21, -6, -6, -11, -24, -5, 3, -10, 45, 1, 17, 2, -23, -10, -17, 7, -4, 12, -2, -15, -34, -16, -8, -13, 47, -2, 9, -11, -31, 1, -4, -12, 19, 17, -21, -22, -32, -10, -17, -21, 39, 0, 21, -17, -30, 18, 17, -28, 29, 18, -39, -22, -35, 6, -22, -46, 24, 8, 24, -29, -23, 29, -3, -28, 35, 2, -19, -20, -12, 15, -29, -30, -1, -1, 27, -18, -5, 22, 3, -15, 26, -2, -3, -7, 0, 21, -15, -15, -16, 17, 15, -9, 22, 11, -8, -8, 5, -10, 8, -6, 1, -7, -3, 4, -13, 15, 8, -2, 23, -8, -39, -2, -17, -24, 14, 0, 13, -11, -3, -10, 2, 19, 7, 6, 21, -15, -25, 27, -20, -18, 10, -6, 14, -11, 1, -24, 12, 18, 22, -7, 16, -14, -24, 13, -16, -10, 5, 3, 6, -3, -1, -3, 38, 13, 9, 8, 17, 0, -1, -3, 2, 2, 
  4, -34, -8, 1, -15, -7, -11, -12, 60, 12, -6, -20, -2, 13, -3, 17, 18, -11, -26, -17, -6, -16, 3, -18, 32, -4, -5, -8, -7, 20, 36, 7, 5, -3, -15, -15, -3, -33, -6, -16, 35, -7, 3, -3, -16, 19, 6, -10, 9, -3, -10, -16, -4, -7, -5, -17, 36, 10, 14, -11, 12, 21, 21, 0, 2, 5, -16, -5, 4, -18, -10, -8, 31, 3, 18, -11, 4, 18, 15, -7, 4, -2, -6, -10, 3, -22, -7, -4, 39, -5, -5, -7, 6, 21, 15, 3, 5, -8, -20, 0, 4, -35, -18, -4, 30, -11, -19, -12, 2, 12, 14, -4, 11, -9, -12, -5, -4, -50, -21, 0, 15, -11, -22, -5, -9, 6, 11, -4, 3, 11, -24, -4, -1, -54, -16, 7, 12, -13, -22, 13, -7, 0, 10, -28, -1, 22, -36, 18, 3, -42, -10, 13, -2, -17, -24, 15, -3, -7, -7, -28, 3, 18, -24, 12, 10, -36, -5, 17, -7, 2, -13, 20, 0, -10, 0, -26, 11, 15, -24, 14, 2, -34, -20, 11, 4, -11, -3, 15, -4, -10, -4, -29, -2, 13, -28, 7, 10, -40, -23, 19, -22, -12, -9, 7, -12, -13, -6, -22, -7, 11, -51, 19, 9, -36, -27, 7, -32, -7, -12, 4, -20, -11, -13, -41, -3, 7, -42, 23, 3, -44, -17, 22, -15, 3, -21, 4, -21, -12, -12, -55, 4, 3, -26, 17, 4, -48, -20, 8, -16, -12, -14, -3, -39, -7, -25, -47, -1, 21, -26, -1, 1, -46, -15, -7, -25, -3, -5, 6, -33, -6, -3, -40, -2, 19, -32, -14, 11, -34, -3, -13, -13, -14, -8, 4, -18, -8, -8, -44, 8, 19, -41, -8, 7, -38, -10, -12, 4, -5, -18, 4, -21, -6, 4, -55, -4, 19, -38, 6, 5, -46, 1, -17, -15, -2, 0, 14, -34, -7, -15, -56, -14, -3, -31, -4, 3, -47, -8, -9, 6, -1, -18, -2, -13, 7, 2, -37, -8, -18, -34, 3, 1, -41, -11, -7, 27, -6, -22, -12, -18, 20, 8, -24, -8, -24, -27, -17, -13, -34, -4, -17, 19, 14, -32, -21, -26, 15, 15, -32, -16, -32, -11, -20, -15, -35, -11, -32, 23, 5, -19, -22, -35, 10, 14, -25, -12, -31, -19, -25, -16, -7, -8, -32, 29, 3, -5, -24, -25, 17, 22, -7, -21, -41, -14, -20, -14, -26, -5, -28, 22, 10, 1, -11, -20, 13, 13, -11, -15, -38, -16, -26, -17, -30, 1, -29, 33, 0, -13, -11, -23, 14, 13, -8, -19, -37, -22, -30, -13, -38, -1, -16, 32, -7, -7, -11, -12, 0, 14, -9, -11, -20, -19, -19, -13, -18, 2, -23, 23, -2, 1, -1, -11, 0, 14, -9, -17, -15, -27, -10, -9, -33, 2, -4, 23, 1, -10, 7, -20, -9, 4, -14, -11, -8, -36, -4, -9, -36, -5, -11, 27, 0, -6, 16, -13, -9, -5, -31, 4, -6, -33, 13, -2, -19, -4, 5, 46, 19, -4, 16, -37, -3, 12, -24, 6, -5, -42, 10, 6, -33, -11, 12, 33, 11, 3, 22, -23, -1, 10, -21, 11, -3, -25, -6, 8, -31, -11, 8, 36, 10, 5, 24, -29, 0, 11, -32, 11, 6, -37, 2, 14, -36, -6, 12, 22, -3, -4, 22, -28, -12, 27, -23, 17, 10, -40, 14, 9, -38, -4, 22, 26, 2, -3, 22, -34, -5, 23, -23, 15, -2, -33, 22, 14, -38, 2, 21, 37, -5, 1, 23, -30, -3, 15, -27, 21, 0, -32, 13, 9, -39, -1, 11, 29, 3, -4, 22, -50, -8, 21, -24, 0, -7, -40, 9, 3, -45, -3, 10, 9, 0, 0, 13, -36, -5, 22, -18, 8, -6, -22, -7, -3, -25, 0, 6, 16, 2, -6, 14, -5, -7, 42, 7, 18, -6, -28, -15, 3, -19, 8, -23, 2, -9, 9, 17, -25, -2, 38, 23, 7, -13, -20, -40, -8, -12, 9, -6, 26, 3, 7, -11, 12, -24, -2, -7, 
  -28, -10, -19, -9, -10, -4, 3, -12, -28, -31, 2, 19, -15, -11, 42, -9, -25, -7, 11, 10, -5, -23, -12, 7, 8, -30, -23, 30, -2, -4, -5, -2, -11, 3, 14, 14, -4, -16, -17, 7, 8, -27, -14, 38, 17, 2, -3, -8, -13, -3, 19, 17, -15, -26, -17, 9, 2, -33, -12, 42, 17, 8, -11, -4, -12, -6, 15, 14, -11, -17, -16, 25, -8, -28, -15, 31, -3, -5, -9, -14, -20, 5, 2, -5, -6, -2, -34, 16, -10, -24, -13, 31, 12, -20, -8, -15, -26, 7, 25, -4, -5, -12, -29, 15, -22, -15, 3, 33, -5, -23, 3, -2, -22, 5, 20, -14, -5, -7, -24, 36, -35, 3, 7, 26, -16, -9, 1, -19, -19, 4, 10, -17, 7, -12, -26, 33, -40, 11, 6, 22, -45, -13, -3, -16, -3, -5, 35, -8, 17, -18, -53, 35, -66, 4, 2, 15, -66, -12, 2, -21, 12, -25, 41, -5, 19, -59, -49, 23, -60, 8, 15, 21, -95, -18, 2, -39, 24, -21, 59, 5, 19, -91, -47, 10, -50, 17, 8, 24, -95, -15, -10, -34, 1, -13, 39, 6, 20, -112, -31, 4, -56, 2, -4, 18, -87, -6, -21, -20, 6, -17, 49, 12, 11, -112, -26, 1, -35, 5, 2, 28, -81, -4, -11, -23, -1, -16, 57, 13, 4, -94, -5, 8, -32, 9, 2, 18, -52, -1, 11, 0, -17, -21, 39, 17, -1, -68, -2, 11, -28, 1, -8, 14, -40, 5, 17, 13, -10, -18, 7, 9, 1, -63, 1, 6, -36, 9, -14, 12, -22, -8, 26, 19, -18, 0, -11, 8, -4, -36, 19, -10, -29, -6, -12, 9, -27, -10, 18, 3, -26, -3, -6, -1, -20, -22, 15, -6, -29, -25, -18, 19, -8, -13, 30, 27, -25, 2, -6, 4, -20, -5, 3, -2, -23, -32, -15, 22, 21, -19, 24, 15, -23, 5, 7, 5, -27, -3, 6, -6, 1, -39, -28, 32, 32, -11, 11, 22, -31, 4, -3, 10, -28, 12, -12, 2, 0, -20, -18, 22, 11, -5, 1, 28, -23, 10, 2, 2, -21, 7, -7, -3, 2, -25, -5, 21, 16, 8, 1, 12, -14, 18, 6, 5, -8, 11, -22, 12, -4, -12, 3, 19, 1, -13, -1, 0, -8, 12, 8, 1, 4, 5, -14, 11, -13, -20, 9, 14, 5, -9, -1, 0, -4, 16, 13, 3, 15, -15, -25, 21, -10, -6, 11, 15, -31, -10, 3, -24, -1, -2, 1, -2, 22, -14, -19, 20, -17, 5, 4, 20, -55, -3, 2, -23, 16, 1, 9, -10, 35, -9, -21, 14, -8, 13, -4, 6, -49, -7, -9, -29, 25, -8, 25, -13, 31, -30, -21, 1, -8, 25, 3, 6, -85, -7, -11, -36, 29, -6, 12, -6, 47, -56, -25, -7, -11, 46, -4, 8, -76, -1, -22, -34, 30, -19, 4, -7, 37, -65, -25, -1, -23, 54, -7, 0, -95, 12, -20, -38, 33, -29, 28, 5, 31, -59, -24, -1, -26, 48, -8, -11, -84, 16, -20, -31, 31, -21, 3, 9, 34, -72, -25, -16, -30, 56, -29, -18, -71, 18, -7, -28, 13, -23, -21, 16, 31, -70, -23, 0, -40, 40, -44, -14, -35, 20, -8, -8, 4, -13, -21, 8, 18, -80, -13, -6, -33, 40, -56, -2, -17, 11, -15, -14, -7, -7, -26, 12, 13, -61, 11, 2, -29, 11, -65, 0, -5, 14, -4, -1, 2, 3, 34, 3, 2, -30, -2, -5, -14, -7, -40, 19, -10, 9, -9, -14, 3, 2, 56, 0, 0, -22, -24, -6, -19, -32, -17, 19, 15, 9, 6, 11, -16, 11, 34, 3, -7, 4, -28, 0, -3, -26, -11, 8, 16, 9, 0, 12, -15, 2, 25, -4, -13, 0, -30, -2, 1, -22, 1, 14, 9, 20, 0, 2, -15, 3, 39, -11, -4, 3, -26, 4, -3, -25, 9, 12, 4, 4, 2, -1, -3, 10, 24, -1, 10, 10, -30, -6, -16, -1, -12, 8, -7, -4, 14, 12, 
  -9, -23, -15, 18, -1, -3, -1, 24, 34, -1, 10, -7, 8, 25, 17, 7, -14, -18, -24, -2, -9, -19, 1, 13, 3, -40, 17, -21, -16, 4, -14, -13, -27, 1, -31, 5, -21, -6, 1, 21, 7, -27, 17, -13, 6, -3, -8, -15, -40, 15, -36, 12, -9, 6, -5, 7, -9, -30, 22, -8, 19, -4, 2, -12, -29, 5, -24, -2, -16, 7, -3, 20, -15, -30, 12, -10, 26, 5, 4, -6, -29, 4, -34, 3, -16, 1, 7, 29, -10, -36, 16, -11, 24, 2, -7, -5, -33, -4, -46, 12, -11, -14, 0, 29, -5, -38, 15, -14, -1, 15, -12, -4, -25, -14, -59, 21, -13, -23, -5, 41, -2, -32, 2, -20, 6, 18, -6, -16, -25, -17, -53, 19, -15, -35, 7, 27, 4, -39, 16, -18, 13, 7, -15, -33, -33, 2, -55, 8, -21, -22, 11, 9, 3, -42, 26, -7, 14, 4, -13, -17, -26, -3, -34, 6, -9, 1, 10, 7, 3, -26, 21, -27, 39, 2, -6, 2, -35, -11, -58, -5, -20, -1, 17, 22, -4, -30, 1, -22, 31, 14, -3, -8, -25, -7, -44, 8, -10, 15, 12, 28, 2, -11, 14, -22, 8, -4, -8, 2, -23, -4, -30, 12, -3, 13, -5, 30, 0, -15, 24, -15, 7, 5, 8, -4, -33, 2, -38, -1, -15, 0, 4, 23, 4, -31, 17, -12, 12, -2, -3, -22, -22, 15, -49, -1, -15, -6, 11, 20, 0, -24, 22, -14, 1, -12, -3, -16, -19, 21, -30, 6, -10, 14, 15, 23, 8, -29, 26, -9, 19, 8, 3, -4, -18, 14, -19, 3, -6, 7, 20, 23, 13, -23, 24, -4, 36, 3, 6, 9, -15, 6, -44, -2, -9, 7, 15, 16, 13, -43, 9, -31, 37, 3, -14, -3, -14, 6, -20, 13, -1, -2, 8, 20, 2, -40, 24, -5, 24, -3, -12, -15, -19, 12, -20, 14, -2, -25, 6, 18, 8, -42, 12, 0, 14, -2, -12, -22, -29, 5, -15, 17, -19, -29, -1, 13, -3, -34, 18, 4, 13, 4, -11, -23, -36, 15, -43, 10, -11, 9, 3, 8, -15, -30, 21, 6, 25, -4, -9, -11, -33, 19, -23, 12, -11, 14, 3, 15, -17, -36, 25, -7, 21, -5, -2, 1, -21, 13, -19, 15, -15, 19, 13, 15, -17, -17, 22, -2, 29, 2, -7, 13, -14, 7, -46, 14, 1, 6, -5, 22, 8, -34, 8, -7, 15, 7, -2, 4, -14, 20, -37, 5, -5, -12, 2, 25, 2, -27, 9, 6, 14, -4, -3, -20, -12, 13, -29, -5, -8, -19, 11, 1, 11, -42, 11, 11, 15, 3, -1, -9, -15, 9, -22, -1, -9, -7, 19, 5, 17, -36, 6, 12, 29, 2, 7, 9, -21, 21, -38, 9, -7, 1, 16, 16, 13, -33, 12, 13, 22, -3, 2, 0, -17, 9, -24, 4, -12, 11, 18, 1, 6, -25, 11, 1, 25, -2, 2, 4, -12, 7, -32, 14, 1, 12, 3, 16, 7, -28, 16, -1, 21, 3, 14, 10, -22, 8, -34, 24, -4, -10, 15, 17, -8, -11, 18, 19, 27, 3, 3, 0, -17, 17, -35, 21, -1, -5, 13, 16, 1, -8, 17, 12, 22, 12, 10, 4, -9, 27, -26, 17, 8, 2, 18, 2, 0, -13, 16, 11, 6, 9, 12, 10, -12, 21, -33, 21, 3, 11, 15, 10, 1, -24, 2, 3, 27, 10, 16, 21, 8, 10, -26, 33, 11, 11, 9, 12, 18, -31, 1, -10, 34, 29, 20, 20, 11, 5, -11, 38, 25, -1, 6, 19, 12, -30, 1, -7, 33, 32, 15, 16, 0, -6, -25, 41, 10, -12, 5, 19, 4, -38, 3, -4, 19, 22, 5, 8, -5, 14, -2, 37, 10, -17, 22, 15, 7, -28, 4, 10, 27, 23, 14, 7, -3, 18, -9, 33, 10, -5, 20, 8, 5, -15, 8, 18, 31, 26, -1, 10, 1, 21, -18, 23, 1, 19, 17, -20, 3, 0, -9, 18, 32, 21, 22, 32, 
  7, -1, 6, 0, -2, 1, -37, -7, -12, 27, 12, 10, -15, 8, 0, 19, 7, -3, -5, 11, -5, 4, -46, -10, -13, 30, 12, 6, -13, 9, 27, 23, 3, 2, -3, 2, -1, -9, -48, -20, -17, 25, 11, 12, -13, 8, 26, 18, -1, 8, -5, 0, -1, -19, -40, -6, -8, 28, 9, 16, -29, 9, 28, 7, 8, 15, -5, 5, 4, -19, -49, -5, -9, 34, 20, 24, -30, 8, 23, 0, -2, 9, -3, 10, 9, -14, -47, -12, -16, 32, 27, 19, -25, 4, 22, 15, 0, 3, -10, 2, 5, -18, -44, -9, -8, 31, 20, 18, -22, 4, 22, 14, 1, 5, -15, 5, 3, -17, -43, -10, -14, 31, 12, 13, -28, 2, 28, 16, 11, 7, -21, -3, -3, -13, -40, -9, -13, 29, 16, 12, -15, 7, 35, 21, 5, 4, -21, -6, -1, -13, -40, -8, -3, 30, 7, 16, -12, 3, 35, 24, 1, 7, -19, -8, 5, -14, -37, -19, -4, 28, 23, 14, -27, 5, 28, 15, 5, 11, -12, 1, 6, -14, -52, -16, -2, 21, 21, 20, -23, 2, 23, 22, 0, 11, -2, -7, -2, -3, -46, -10, -9, 20, 20, 22, -14, 3, 29, 12, -5, 12, -11, -3, 6, -12, -33, -16, -5, 21, 24, 23, -19, 5, 28, 13, 8, 11, -1, -1, 11, -7, -46, -10, -5, 37, 29, 15, -33, 3, 22, 15, 5, 5, -1, -9, 8, 0, -40, -9, -9, 30, 18, 16, -25, 10, 25, 15, 6, 2, 1, -6, 7, -10, -34, -6, -2, 36, 17, 19, -25, 8, 21, 16, 10, 5, 9, -3, 8, -8, -40, -8, -2, 34, 18, 18, -27, 4, 19, 16, 0, 6, -1, -16, 8, -7, -42, -12, -5, 29, 22, 13, -22, 2, 20, 13, 0, 2, 0, -9, 0, -3, -47, -15, -5, 29, 6, 14, -25, -4, 16, 13, -4, -1, -7, -6, -4, -2, -53, -20, -12, 27, 9, 12, -32, 0, 24, 18, -1, 2, -4, -14, 5, -5, -55, -18, -12, 33, 12, 18, -33, 0, 22, 6, 10, 3, 4, -16, 2, -8, -45, -13, -9, 36, 23, 18, -22, 4, 22, 9, 12, 8, -6, -12, 8, -5, -51, -16, -5, 39, 13, 22, -14, 5, 24, 19, -5, 2, -5, -12, 4, -7, -41, -7, -8, 33, 6, 20, -18, 1, 28, 12, 4, -2, 0, -8, -4, -7, -50, -7, -15, 33, 13, 23, -14, 1, 35, 14, 4, -4, 1, -17, -6, -4, -52, -14, -15, 29, 12, 14, -15, -2, 32, 12, -3, -2, -4, -24, -13, -4, -45, -22, -12, 26, 12, 13, -23, -6, 35, 15, 2, 1, -3, -27, -6, -4, -38, -18, -16, 25, 19, 14, -13, -12, 33, 17, 0, 1, 5, -27, -8, 3, -46, -20, -11, 26, 16, 19, -11, -9, 30, 19, 8, 9, 9, -23, -1, 2, -39, -15, -9, 22, 28, 13, -9, -13, 29, 20, 3, 3, 13, -19, 4, -1, -40, -16, -12, 27, 32, 7, -17, -5, 26, 17, -4, 3, 12, -15, 3, -2, -46, -20, -9, 29, 19, 6, -22, -5, 25, 15, 0, -1, 7, -24, 0, 0, -46, -23, -8, 27, 22, 6, -24, -6, 28, 23, 5, -1, 1, -18, 5, -4, -53, -25, -10, 38, 23, 8, -14, -3, 21, 18, 10, 3, 11, -18, -3, -2, -48, -18, -10, 30, 20, 10, -18, -5, 20, 21, 10, 10, -1, -20, -1, -3, -48, -30, -11, 33, 22, 17, -22, -4, 24, 20, 5, 9, 3, -29, -5, 4, -63, -37, -6, 14, 19, 13, -19, -9, 30, 30, 7, 6, 7, -32, 2, 1, -65, -29, -4, 18, 6, 10, -25, -7, 26, 27, 5, 5, -6, -27, -5, -1, -63, -21, -8, 24, 7, 16, -25, -8, 29, 18, 16, 9, 1, -31, -6, 0, -58, -23, -3, 30, 18, 20, -23, -11, 33, 23, 6, 12, 22, -7, -16, 13, -55, -4, -7, -2, 11, 4, -3, -10, 0, 12, 
  -1, 0, -6, 2, -9, -7, -4, 3, -3, 10, -2, -9, 2, -2, 2, 0, -3, -12, -1, -1, -3, -4, 0, 2, 2, 3, 1, -5, -2, -9, 6, 6, -9, 2, -9, -9, -13, -7, -1, -8, -7, 4, -2, -6, -8, -8, 0, -6, -8, 2, 0, -5, -8, 4, -5, -1, 1, -7, -6, -10, 2, -5, -7, -8, -7, -7, -2, -3, -10, -1, -3, -9, -3, 4, 2, -1, -6, -10, 1, 0, -3, 0, -5, -9, -12, 3, 7, -6, -6, 2, 1, -4, -5, -9, -1, -4, -3, 4, -4, 3, -8, 6, 4, 3, 0, 4, 3, -3, -2, 1, 1, 0, -4, 6, -6, -4, -8, 6, 0, 0, -4, 1, 6, 8, -3, -4, -4, -4, -6, 0, -6, -3, -5, 3, -4, 3, 4, 0, 0, -1, -3, 0, -1, 0, -4, -6, -8, -1, -4, 0, 3, 4, -4, 1, -5, -8, -6, -4, 4, 1, -7, -5, -8, -4, -7, 4, -2, -7, -7, -4, -6, -6, 0, 3, 1, -1, -8, -7, -9, 4, -6, -8, 3, -2, 2, 2, -5, -3, -6, -5, 3, 3, -4, -8, -3, -4, -10, -2, -1, -2, -6, -4, -1, -5, -3, -3, 0, -9, -17, -5, -2, -14, -11, -9, 2, -13, -3, 4, -1, 2, -6, -14, -12, -7, -10, -10, -5, -7, -10, -5, 4, -17, -9, -5, -5, -2, -10, -13, -10, -10, -4, -5, -6, -2, -5, 6, -4, -14, -1, -5, 2, -8, 1, -5, -3, 0, 0, 0, 1, 1, 3, 5, -5, -3, 3, 0, 8, -1, 0, -2, 4, 0, -7, 3, -4, -9, -3, 6, 3, -4, 1, 3, 4, 2, -3, -9, 4, 9, -1, 3, 1, -2, -3, 2, 4, -2, 4, 10, 4, 1, -2, 0, 6, 9, 0, 5, -6, -8, -2, 7, 2, 1, 2, 5, 2, -4, -3, -10, 8, 4, -7, 3, -7, -4, -7, 2, -5, 2, -1, 2, 1, -4, -1, -1, -2, -6, -6, -8, -9, -10, -6, -1, 3, -1, -2, 0, 1, 4, 0, -7, -3, -3, -10, -5, -7, -3, -9, 6, 2, -9, -1, -1, 1, 1, 1, -8, 2, -4, -2, 2, 2, -7, -5, -4, -2, -3, -5, 1, 0, -6, -6, -3, 2, -6, -13, 1, -4, -6, -11, -1, -6, -7, -2, -6, -1, 0, 2, -5, -8, -3, -10, -9, -7, 1, -14, -6, -7, -5, -6, 0, -3, -2, -7, -1, -11, -9, -12, -1, -6, -10, -6, 1, -2, 3, -1, 1, -6, -4, -11, -12, -7, -1, -8, -6, -3, -4, -7, -9, -7, -5, -5, -2, -6, 0, -5, -1, -11, -8, -5, 1, -2, -3, -11, -4, -1, 1, -1, 2, 0, -5, -7, -7, -7, -1, -8, -5, -7, 1, -7, -5, -3, -6, -6, 3, -3, -5, -1, -3, -4, -9, -6, -4, 0, -7, -1, 0, 1, -1, -4, -4, 3, 2, -4, -11, 5, -2, -8, 3, -9, -8, -12, 0, 4, -8, 2, 2, -4, -5, 2, -10, 1, -8, -4, 1, -7, -3, -11, -2, 4, -5, 0, -3, -1, 0, -1, -9, 2, -8, -2, -5, -8, -1, -6, 4, -5, -4, -2, 0, -5, -8, -3, -3, -1, 0, -1, 1, -8, -7, -5, 0, 0, -2, -7, 6, 2, -5, -1, 1, -2, 0, -2, -5, -6, -5, 0, 4, 5, 6, -4, 5, 3, 2, 1, -4, 4, 3, -3, -8, 0, -8, -6, 5, 4, -2, 0, 4, 0, -5, 0, -7, -3, 0, 0, -6, -7, -3, -5, 0, 0, -8, -9, 5, -6, -4, 2, -1, -4, 2, 2, 5, 4, 1, -2, -4, -1, -1, 4, -2, 0, 8, -5, 0, 0, 0, -1, 4, 2, 0, -3, 7, -6, -9, -3, -3, 0, 2, 0, -6, 5, 3, -8, -1, -4, -9, -11, 5, 6, -4, -2, 7, -2, -5, -6, -11, 2, -5, -7, -5, -2, -7, -5, -4, -3, -4, -7, -10, -5, -4, -11, -6, -13, -7, 
  3, -6, 4, 1, 3, 3, 2, 2, -1, -2, 1, 0, 4, -5, -3, 1, 2, 3, 4, 2, -2, -2, -4, 4, -5, 0, -3, 3, -3, 2, -1, 0, -1, -1, 1, 2, -2, -5, 2, 1, -1, -3, 4, -5, 3, -6, 0, -5, 1, -1, 2, 2, -5, 4, -2, -5, 3, 1, -2, 2, 4, -5, 4, -5, 2, 3, -5, -5, -2, -5, 2, 2, 3, 0, 5, 4, 0, -4, 3, 2, 0, -3, 4, -2, -2, -3, 4, 1, -1, 1, -4, 2, 0, 0, -4, -3, -4, -1, -3, 4, 4, 0, 2, -1, -5, -2, 1, -5, 2, -1, 2, 1, -1, 1, 4, 0, -3, 0, -4, 4, -5, -3, -3, -5, -4, -1, 0, 1, 3, 0, 3, -5, -4, -1, -5, -2, 1, -5, 3, 3, -5, -2, 2, -1, -3, 1, 2, -1, 1, 0, -4, 2, 0, -4, 0, -4, -2, -1, 3, -2, -3, -2, 3, 0, 3, 1, 1, -1, -4, -4, 4, -3, 4, 3, 0, -4, -4, -2, -3, 4, 3, -5, -6, -2, 4, 1, 4, 0, -5, -6, 4, -2, 4, 2, 4, -2, -4, 3, 4, -1, 5, 0, -2, 2, 1, 3, -6, 1, 0, -3, -2, -5, -2, 4, -2, -4, -1, -1, 1, -1, -2, 1, -2, -4, 2, -4, 4, 2, -3, -1, 4, 3, -4, 3, -2, -4, 0, -4, 2, -4, -4, -1, 3, 2, 3, 4, -5, -1, -2, 0, 3, -1, -1, 3, -3, -3, -2, -5, -1, 4, -5, 0, -6, 2, 2, 0, 0, -5, -1, 1, -4, 0, -1, -5, 3, 4, -5, -6, -1, 0, 1, 4, 0, 2, -3, 0, 1, -5, 2, -5, -5, 4, -3, 2, 0, 1, -1, -5, 4, 2, 2, -1, 2, -6, 1, 4, -5, -4, 0, 0, -4, 0, -1, -3, 1, 2, 4, 4, 3, 0, 0, 2, -5, 1, -2, -3, -1, 3, 2, -3, 1, -5, -5, 0, 1, -1, 1, 4, 1, -4, -4, 1, -5, 1, -4, 3, 3, -2, 3, -1, -5, -3, 3, -5, -4, 2, 4, -1, -5, -1, -2, -2, 3, -2, -3, 3, 2, 4, -2, 1, -3, -1, -3, 2, -1, -3, 0, -2, -4, -3, -3, -4, -1, -1, -1, 0, -3, 2, 2, 0, 0, 4, -5, -5, 4, 2, 1, 0, 3, 3, -5, 1, -4, 3, 3, -3, 4, 4, 4, -4, 3, -3, -2, 3, -3, 4, 1, 2, -4, 3, 3, -6, 2, 3, 4, 1, -3, -5, -2, -3, 3, -5, 2, 3, 3, -1, -4, 1, -3, -1, -2, -5, -1, 4, 0, -3, -3, -3, 1, 1, 0, 2, -6, -2, -4, -3, 0, 3, -5, 4, 3, -3, 4, -3, -4, -5, -2, -5, -1, -4, 2, -5, -4, -4, 1, 3, -3, -3, -5, 0, -4, -1, -4, 3, -1, 1, 2, -5, 4, 1, 2, 1, 3, 3, -3, -2, 2, 0, 3, -1, 2, -1, 2, 0, -5, 1, 4, -2, 3, -5, 0, -4, 1, -1, -1, -1, -1, 0, 1, -3, 4, -3, -4, -4, -1, 4, -3, -2, 1, -3, 3, -2, -5, 3, 3, 2, 0, 2, -3, -5, 2, -6, 1, -3, 4, 2, -4, -2, -3, -4, 1, 4, -2, -5, -1, 2, 2, 2, -2, -3, 3, 2, 1, -4, -5, 2, 1, -3, -4, 2, 2, 4, -3, 4, 0, -3, 1, 4, 3, -3, -4, -3, 2, 1, -2, 4, -4, 3, 3, 0, -4, 0, 0, 3, -5, -6, -5, 1, -1, 2, 1, 3, -5, 2, 3, -5, 1, -5, -2, -2, 1, 0, 1, -1, -5, 1, 3, -3, 3, 3, 2, -5, 3, -1, 1, -5, 0, 1, -5, -4, 1, -3, -3, -5, -1, -5, -2, -1, 2, -4, 1, -3, -5, -1, -1, -5, -5, 1, 3, -4, 4, -1, -3, -1, -1, -1, 0, 1, -4, 4, -2, 1, -4, 2, -2, 1, 2, -4, 0, 2, 2, -3, 
  -6, 2, -2, 2, -5, 1, -3, 4, -3, 2, 2, -2, -6, -2, -7, -4, 1, -1, 2, 0, -6, -1, 2, 0, -6, -4, 2, -2, -4, -4, -5, 1, 1, 0, -5, -5, -6, -4, -1, -5, -1, 2, 2, -3, 2, 2, -5, 1, -2, -5, -3, 1, -7, -5, 1, 2, -6, -1, 2, 1, -1, 1, 2, -6, -6, -7, -4, 0, -4, -5, 1, 2, -2, -4, -5, -1, -1, -5, -4, -3, -6, -5, 0, -6, -4, 0, -2, 1, 0, -1, -4, 3, -5, -1, -5, 1, 2, -1, -3, 4, 0, -2, -4, -1, -3, 4, 4, -2, 2, -5, -6, 3, -1, -5, -4, 3, -4, -5, 2, -2, 2, 3, -2, -3, -5, -2, -1, -4, -5, -3, 1, 4, 2, -4, 0, 1, 2, -6, 2, -6, 4, -4, -2, 3, -2, -5, -2, -5, -3, -3, 1, 2, 0, 0, 1, -1, 3, 2, 4, 3, -1, 1, 0, 3, -6, 0, 1, -1, 1, 0, 3, 2, -4, -1, 3, 2, -5, -2, -1, -1, 0, -2, -2, -1, -1, 0, 1, 2, 2, -6, -5, -4, -2, -6, 3, -1, -6, 1, -5, 3, -2, 1, -1, -4, -5, 0, -1, 2, -4, -1, -2, -2, 1, 2, 2, -5, -1, 0, -4, 2, -3, -2, 2, 2, -6, 3, -3, 1, 1, -5, 2, 0, -2, 0, -2, 0, 1, -3, -3, 0, -1, 2, 0, -4, -1, -6, 4, -6, 1, -3, -1, 0, 1, 2, -1, 4, 3, -1, -3, 1, 1, -2, 1, 0, -4, -5, -1, 0, -2, -1, 1, 1, -6, 3, 2, -6, 0, 5, -2, 4, -3, -4, 4, -2, -2, 2, -4, 2, -1, -6, -5, -3, 2, 3, -2, 4, 2, -1, 0, -2, 3, -3, -4, 3, 3, 3, -2, -4, 0, 2, -2, -2, 2, 0, -2, -3, 2, -1, 4, -4, -4, -1, -3, 3, 3, -6, -5, 1, -3, -3, 1, 0, -3, -4, 0, 4, 0, -5, -1, -7, 2, 1, 3, 3, -4, 3, -4, -5, 4, 2, -4, -5, -1, -4, -2, -4, 3, -7, -5, 3, 0, -5, 0, 2, 3, -3, 2, -2, -2, 3, 2, -5, -4, 4, -3, 0, 0, 2, 3, -1, -1, 3, 3, -1, -3, -5, -2, 0, -5, -3, 3, -2, -4, -1, -5, 0, 0, -2, -5, -1, -4, -1, -5, 3, -1, -5, 2, 2, -1, -6, -5, -5, 5, 2, -2, 0, -6, -7, 2, 3, -1, 1, -7, -6, 3, -5, -6, 1, -7, -4, -4, -1, -5, -3, -4, 3, 3, -5, 3, -1, -1, 1, 2, -3, -6, -2, -6, 3, -2, 2, -3, 0, -6, -7, 4, 3, -3, -3, -1, -7, -1, -1, -6, -6, 3, -4, -5, -6, -1, -2, 3, -6, 1, 2, 0, -5, -3, -7, 0, 1, -7, -3, -4, -6, 3, -6, -4, -3, -3, -4, 1, -1, 1, 1, -5, 2, 3, -1, -3, -5, 1, -5, -5, 1, 3, 0, 3, -3, -5, 1, -7, 3, 4, 3, 2, 2, 1, -3, -4, 3, -4, -1, -1, -4, 2, -6, 2, 2, -4, 2, -4, 3, -6, 5, 1, -3, -1, -3, 1, 2, 4, -6, 3, 0, -5, -5, -4, 2, -4, 1, -1, 2, 5, -1, -2, -4, 4, -2, -3, 0, -1, -4, -2, 2, 3, 5, 2, -3, 2, 2, 1, 3, -4, -2, 4, -5, -1, 2, -1, -1, 0, 1, 1, 0, -2, -5, 1, -6, 0, -2, 1, 0, -4, -2, -6, 1, -1, -2, 2, -1, -4, -1, -1, -5, 0, -6, 3, -3, 1, -1, -1, -6, 0, -3, -1, -2, -5, 0, -2, -5, -3, -6, -2, -2, -1, 0, -2, -3, -4, -1, 0, -2, -7, -7, -3, -1, 0, -4, 0, 3, -3, 0, -6, -3, -2, -5, -4, -5, -7, -5, 4, -4, 3, 3, 0, 1, 1, 0, -1, -3, -5, -5, -4, 0, 3, 3, -2, 2, -4, -5, 1, -5, 
  -2, 23, 2, 10, -15, -9, 15, 4, 30, 9, 12, 30, 24, -8, -9, -10, -3, 22, 16, -4, -2, 22, -2, -5, 26, -1, 13, 29, 15, -5, -9, 8, 6, 29, 21, -9, -4, 20, 4, 1, 23, 2, 14, 32, 8, -16, -8, 2, 3, 22, 36, 9, -9, 18, 8, 3, 29, -4, 24, 31, 17, -13, -7, 8, -13, 21, 23, -1, -15, 10, 8, 4, 12, -5, 10, 32, 7, -24, -3, 4, -20, 6, -3, -7, -21, 13, 3, -9, -1, -14, 5, 17, 0, -14, -21, -9, -17, -9, 4, 4, -13, 7, 0, 1, 5, -12, -8, 4, 11, 1, -9, -9, -8, -25, -2, 7, -5, 5, -11, -7, 27, -3, -7, -14, 16, 16, -17, -10, -2, -36, 0, -5, -4, 3, -17, -20, 35, -13, -28, -17, 8, 25, -22, -5, 1, -38, 8, -3, 0, 3, -11, -25, 39, -8, -38, -19, 6, 31, -28, -13, 3, -31, 7, -6, 1, -8, -15, -19, 49, -4, -33, -23, 11, 27, -31, -28, 13, -24, 5, -13, 5, -7, -10, -22, 39, 0, -19, -13, 3, 20, -43, -29, 10, -14, 19, 1, 0, 2, -21, -5, 46, 7, -10, -2, 6, 19, -34, -12, 10, -22, 22, 3, -5, 17, -17, -3, 46, 10, -22, -5, 41, 11, -18, -1, 9, -24, 1, 1, -7, 15, -8, 0, 26, 16, -25, 1, 27, 3, 2, 6, 1, -30, -2, 8, -12, 22, -4, -4, 26, 4, -34, 6, 29, 4, 6, 12, -4, -39, -5, 14, -15, 33, 4, 2, 25, 14, -36, -6, 27, 7, -15, 14, 6, -33, -5, 16, -10, 24, 3, 5, 36, 8, -35, -4, 30, 19, -18, 20, 4, -18, 3, 6, -14, 14, 8, -11, 35, -9, -26, 8, 32, 20, -12, 29, 7, 4, -1, 5, 0, 8, 14, 8, 35, -14, -12, 22, 21, 16, -9, 8, 6, 15, 18, 13, -2, 0, 22, 21, 33, 0, 13, 40, 11, 4, -8, 0, 11, 32, 22, 3, -1, 9, 35, 28, 29, 9, 24, 43, 10, -7, -2, 3, 7, 34, 29, 6, 11, 9, 38, 25, 32, 7, 31, 44, 11, -13, 8, 6, -2, 22, 19, 7, 6, 3, 27, 23, 18, 2, 26, 40, 1, -20, -1, -4, -4, 17, 13, 16, 3, 17, 19, 21, 17, 8, 25, 27, 7, -25, -8, -2, -15, 7, 5, 19, -2, 18, 13, 17, 14, 9, 5, 22, 1, -29, 6, 0, -11, 2, -3, 10, -4, 15, 2, 13, 13, -2, 4, 14, 7, -20, -7, -2, 1, -10, 0, -5, 11, 7, 2, 6, 12, -20, -10, 2, 14, -12, -15, 0, 24, -1, 2, -13, 18, 0, -5, -8, 24, -14, -6, 3, 22, -2, -12, 0, 25, 13, 13, -15, 25, -3, -6, -11, 45, -22, 9, 0, 16, 4, -12, 9, 26, 12, 29, -6, 20, 3, 9, -6, 41, -6, 5, 6, 17, 8, -16, 4, 22, -2, 36, -8, 17, 10, 12, -5, 52, 13, -4, 0, 37, 10, -18, -9, 13, -19, -1, -12, 5, 7, 10, -12, 40, 4, -15, -16, 37, 13, -15, -2, 14, -33, 2, -5, 2, 18, -3, -27, 30, 7, -30, -32, 41, 24, 0, 16, 7, -45, -5, -9, -10, 15, -17, -21, 15, 11, -41, -41, 36, 24, -5, 13, 2, -57, -15, 0, -15, 8, -31, -17, 20, 11, -54, -52, 21, 21, -13, 11, 2, -50, -2, -17, -16, 5, -42, -17, 22, 11, -43, -37, 12, 20, -32, -10, 6, -41, -14, -12, -15, 5, -20, -14, 38, 6, -49, -31, 22, 17, -31, -4, 10, -26, -13, -5, -8, 8, -12, -10, 51, 9, -29, -17, 20, 12, -46, -3, 13, -1, -3, -23, -4, 1, 13, -1, 47, -7, -9, 14, 10, 9, -30, -1, 13, 24, 2, -21, 5, 9, 21, 3, 40, -12, 7, 31, -9, -7, -19, -5, 26, 51, 7, -19, 9, 1, 23, 21, 40, 28, 35, 26, 0, -13, -5, -14, 
  -11, 17, -21, 5, -16, -2, 27, 6, 26, -2, 37, 33, 28, 11, 2, 17, -19, 12, -29, 9, -4, 1, 28, 6, 18, -8, 27, 16, 36, 7, 17, 11, -24, 7, -31, 6, -10, -9, 32, 9, 23, -17, 33, 7, 32, 14, -3, 3, -27, 11, -32, 19, -7, -12, 33, 14, 16, -10, 24, 2, 42, 19, -10, 1, -13, 12, -31, 9, -6, -8, 20, 4, 17, -11, 22, -1, 50, 19, -13, -4, -8, 8, -12, 6, 1, -8, 18, 8, 28, -20, 35, 0, 41, 15, -1, 16, -16, 12, -11, 10, -4, -8, -3, 3, 13, -22, 29, 6, 41, 20, 6, 20, -8, 19, -20, 10, -6, -9, -2, 6, 15, -31, 14, 6, 48, 17, 6, 11, -9, 26, -15, 9, -5, -24, 5, -3, 24, -33, 17, 10, 44, 22, -8, -1, -12, 32, -17, 1, -3, -8, 13, -4, 35, -38, 21, 17, 49, 14, -5, 9, -6, 41, -5, -4, -7, 8, 7, -4, 28, -27, 22, 14, 44, 16, 11, 22, -11, 38, -20, -4, 3, 7, 5, 2, 32, -37, 30, 19, 45, 11, 17, 24, -14, 35, -26, 1, 5, 23, 5, -2, 25, -31, 21, 4, 43, 5, 18, 25, -20, 16, -16, 8, -6, 27, -1, 6, 14, -11, 18, 17, 26, 7, 13, 24, -24, 25, -12, 13, -6, 10, 6, -1, 17, -17, 29, 18, 34, 0, 3, 9, -13, 29, -17, -1, -4, -3, 6, 4, 31, -19, 30, 10, 12, 11, 0, 3, -8, 29, -14, 5, 0, 4, 1, -4, 12, -21, 38, 8, 19, 2, 8, 10, -21, 20, -9, 6, -1, 8, 10, 5, 21, -13, 34, 13, 30, 6, 5, 11, -18, 15, -30, -3, -4, 2, 0, -11, 18, -18, 21, -13, 16, 2, -5, -6, -13, 5, -23, 2, 2, 1, -6, -6, 10, -19, 25, 3, 18, 8, -10, -5, -6, 12, -25, 10, 7, -1, -3, 8, 24, -17, 26, 0, 28, 14, 3, -5, -3, 8, -13, 27, 6, 14, -11, 5, 27, -12, 36, -4, 49, 20, 18, 18, -2, 4, -10, 16, 5, 18, -5, 12, 36, -10, 21, 1, 31, 19, 21, 18, -9, -4, -22, 10, -6, 2, -15, 2, 26, -18, 14, -13, 25, 13, 12, 9, -20, -9, -39, 7, -6, -6, -16, 1, 10, -18, 8, -17, 22, 14, -5, 1, -11, -13, -25, 4, -3, -10, -24, 4, 19, -26, 6, -18, 22, 9, -5, -9, -5, 8, -14, -3, 2, -1, -15, -10, 19, -28, 3, -9, 33, 17, 3, 10, -8, 18, -20, 5, -1, 6, -10, -1, 29, -30, 15, 11, 35, 3, 13, 28, -12, 16, -26, 13, 2, 17, -6, 6, 30, -33, 7, 4, 43, 8, 12, 16, -20, 12, -33, 20, -10, 7, -16, 6, 30, -14, 23, -3, 27, 8, 2, 8, -24, 12, -31, 9, -15, 1, -12, -9, 15, -18, 14, 0, 9, 2, -5, 6, -31, 10, -41, -5, -10, -6, -18, 3, 18, -14, 21, 10, 0, -7, -13, -13, -27, 14, -37, -1, -7, 2, -17, -1, 2, -14, 20, 20, 11, -4, -14, -9, -34, 8, -41, 5, -11, 4, -30, 11, -2, -16, 22, -2, 14, -6, -15, -5, -33, 9, -41, 1, -7, 7, -26, 0, -11, -8, 5, -10, -3, -5, -11, 1, -27, -17, -51, -1, -5, -9, -23, -10, -5, -19, -8, -5, 10, -2, -25, -12, -20, -10, -44, -6, 0, -14, -27, -7, 2, -22, 2, -9, 10, -1, -17, -14, -13, 3, -27, 1, 0, -7, -13, -17, -2, -29, 5, 11, 19, 0, -11, 1, -30, -11, -65, -7, -6, -21, -1, -10, -9, -41, -7, 10, 14, -6, -13, -22, -31, -11, -80, -8, -14, -14, 7, -8, -25, -28, -24, 5, 11, -13, -7, -9, -3, -5, -77, 7, 4, -10, -21, 3, -16, -28, -16, -2, 21, -5, 9, -6, -2, -3, -59, -2, 1, -12, -22, 0, -13, 3, -15, -18, 4, -2, 0, -5, 
  10, 0, 9, -9, 2, 9, -43, 0, -17, 14, 14, -5, -19, 10, 5, 23, 13, -6, -7, 4, -2, -4, -31, -7, -13, 14, 18, -6, -17, 13, 33, 23, 5, 2, 3, 8, 6, -12, -36, -20, -9, 3, 16, -2, -10, 16, 33, 23, 6, 6, -6, 0, 9, -26, -40, -3, -4, 1, 12, 0, -20, 9, 22, 12, 10, 5, -8, -2, 8, -22, -61, -7, -2, 0, 15, 5, -25, 12, 22, 1, 9, 3, -3, 4, 15, -26, -61, -13, -6, -2, 17, -3, -20, 16, 25, 17, 2, -1, -2, -1, 5, -22, -53, -11, -4, -6, 19, -5, -28, 11, 23, 10, 7, 1, -4, 2, 6, -13, -47, -8, -5, -4, 14, -1, -22, 6, 36, 17, 11, -6, -13, 5, 4, -15, -53, -4, 2, -10, 9, -9, -11, 7, 40, 26, 12, -4, -20, -5, 0, -11, -52, -1, -2, -4, 6, -2, -6, 12, 32, 27, 6, -9, -13, 2, 8, -15, -52, -5, -3, -3, 11, 6, -12, 10, 36, 18, 5, -2, -11, 4, 5, -13, -71, -8, 4, -5, 13, 5, -8, 13, 30, 20, 11, 8, 1, 4, 10, -6, -59, -6, 5, -3, 16, 2, -6, 15, 29, 11, 6, -1, -9, 5, 14, -11, -49, -8, 3, -9, 15, 2, -13, 23, 24, 19, 11, -7, 11, 4, 11, -8, -57, 2, -2, -1, 23, 7, -31, 21, 29, 14, 6, -10, 9, 2, 14, 1, -47, 2, -4, 3, 11, -2, -11, 18, 35, 16, 16, 1, 3, 8, 11, -9, -41, 6, -5, 9, 24, -2, -15, 16, 27, 14, 13, -2, 8, 0, 9, -6, -48, -6, -3, 9, 25, -4, -15, 16, 20, 16, 4, -9, -2, -5, 15, -3, -45, -10, -6, 8, 21, 2, -14, 5, 27, 17, 11, -3, 2, 6, 9, 1, -39, -7, -2, 4, 16, -1, -19, 7, 27, 18, 8, 5, 7, 2, 14, -2, -47, -6, -5, 3, 23, 5, -22, 11, 24, 18, 4, 1, -1, 2, 13, -11, -48, 6, -2, 7, 8, 5, -19, 9, 27, 13, 12, 1, 2, 5, 9, -13, -47, -5, -1, 4, 22, 6, -23, 14, 22, 10, 12, 0, -2, 0, 5, -12, -63, 3, 3, 6, 14, -2, -10, 9, 28, 17, 2, -5, -4, -7, -1, -8, -54, 4, -3, -6, 13, 5, -10, 8, 38, 22, 1, -2, 5, -2, -11, -9, -58, 5, -16, 0, 17, 5, -3, 4, 37, 21, 11, -7, 3, -5, -7, -1, -61, -7, -12, -1, 16, 2, -5, 8, 36, 27, 12, 2, 2, -9, -1, -6, -56, -8, -8, 4, 27, 8, -10, 6, 46, 23, -1, -4, 2, -3, -6, -6, -64, -4, -8, 3, 25, 2, -3, 5, 43, 22, 2, -11, 6, -2, 0, 8, -57, 11, -10, 2, 22, 0, -6, -2, 36, 14, 3, -5, 12, 2, 3, -2, -59, 1, -5, -4, 19, 0, -8, -1, 36, 21, 8, -3, 12, 3, 4, -10, -68, 5, -8, -2, 29, 3, -18, 5, 37, 20, 10, -7, 18, 2, 11, -6, -71, 4, 0, 6, 20, -5, -24, 6, 40, 22, 9, -4, 16, -6, 2, -2, -67, 3, -4, 8, 29, -13, -15, 4, 37, 30, 8, -7, 11, 9, 11, -3, -62, 2, -3, 18, 29, -7, -10, 5, 29, 25, 6, -14, 6, 9, 6, -3, -67, 0, -7, 6, 22, -6, -20, 7, 27, 18, 10, -5, 2, -1, -4, 4, -62, -8, -5, 10, 14, 5, -21, 4, 29, 23, 14, 2, 6, -10, 4, 2, -68, -16, -6, -3, 8, 9, -13, 4, 32, 37, 6, -5, 9, -11, -4, -1, -70, -5, 0, -9, -2, 8, -20, 9, 39, 31, 14, 0, -1, -1, 3, -6, -66, -3, 0, -3, 2, 17, -14, 0, 35, 26, 9, 2, -4, -11, -1, -2, -56, -9, 2, 12, 18, 18, -19, 9, 37, 24, -2, 8, 23, 7, -15, 17, -50, 3, 1, 3, 13, 6, 3, -2, 1, 17, 
  19, 10, 13, -11, 19, -18, -8, -20, 9, -18, 29, -4, -21, 4, -5, -7, 15, -3, 7, 13, 3, -10, -9, 7, -1, -5, 11, -11, -19, 16, 1, 8, 16, -5, 26, 13, 2, -14, 0, 20, 5, 2, 19, -2, -17, 11, 6, 8, -3, -5, -4, 24, -11, -11, 6, 26, 12, -11, -16, 4, -5, 3, 11, 11, -13, -26, -22, 2, -27, 0, 10, 29, 4, -1, -45, 4, -13, -10, 33, 10, 3, -29, -46, -11, -7, -7, 1, 3, 11, 4, -49, 24, -26, -22, 33, -13, 1, -25, -37, -22, -3, 12, 6, -29, 16, 0, -23, 31, -21, -28, 17, -21, -4, -18, -21, -8, -4, -5, 0, -33, 35, -15, -6, 8, -24, -24, 14, -10, 5, -12, 1, 2, -6, 0, -28, -23, 19, -23, 16, 14, -19, -15, 3, -18, 3, 3, 22, 5, 5, -11, -41, -13, 7, 0, 24, -2, -28, -2, 5, 3, 9, 10, 15, 24, 3, -11, -32, 18, 3, 18, 30, -18, -8, 6, 17, 14, 3, 6, 18, 30, 7, -8, -12, 33, -6, 23, 26, -12, -7, 13, 15, 18, 1, -4, -9, 12, -9, 3, 0, 28, -1, 21, -16, -10, 6, 8, 19, 22, 0, -27, -22, -4, -7, 12, 14, 10, 18, 10, -7, -1, 0, -10, 22, 15, 4, -33, -6, -33, 16, -13, 28, -22, 44, -23, -40, 16, -12, -25, 10, -18, -1, -12, 0, -41, 10, 5, 12, -46, 36, -53, -37, 33, -39, -42, 22, -13, -13, -13, 9, -2, -13, 0, -20, -42, 38, -41, 0, 33, -17, -15, 17, 13, 3, -13, 28, 11, -19, -30, -29, -15, 19, -13, 24, 28, -12, -3, 17, -3, 0, -1, 11, 19, -16, -16, -33, 7, 6, 5, 19, 4, -16, 17, 8, -8, 12, 7, 19, 23, -3, -13, -24, 15, -2, 25, 30, -9, -7, 21, -7, -3, 20, 17, 14, 29, 18, -13, -15, 16, 1, 21, 15, -19, -3, 17, -8, 1, 15, 6, -37, -2, 3, 10, 9, 8, 6, 16, -25, -23, 0, -4, -3, 9, 12, 2, -52, -14, 6, -2, 19, -4, 26, -29, -34, 5, 3, -26, 22, 9, -22, -21, -48, -32, -14, -23, 46, -20, 24, -31, -71, 36, 18, -49, 46, 9, -31, -14, -52, -34, -18, 15, 7, -50, -27, -25, -39, 46, -42, -58, 52, 4, -8, -35, -21, 15, -26, -15, -34, 1, 5, -24, -15, 30, -10, -25, 24, -7, 0, -21, -3, 43, -20, -21, -45, 16, 11, 3, 14, 10, -8, 3, 11, -6, 14, -8, 27, 35, -11, -17, -39, 24, 14, 13, 27, -8, -13, 36, -6, -9, 18, 6, 34, 33, 10, -31, -18, 19, 15, 19, 47, -9, -14, 33, -13, -12, 10, 5, 16, 13, 26, -21, 10, 14, 8, 5, 8, -24, -24, 14, -10, 3, 1, -5, -13, -8, 12, -7, 19, -1, 12, 9, -18, -7, -13, -10, 14, 16, -17, -17, -10, -12, 2, -8, 28, -3, 18, -5, -46, 18, -9, -29, 29, 14, -48, -24, -52, -8, -16, -21, 8, -21, 18, -27, -90, 27, 3, -38, 57, 17, -19, -14, -8, -12, -17, -24, -11, -34, 3, -28, -33, 31, -2, -27, 41, 5, 5, -9, 20, 5, -8, -19, -60, -6, 28, -25, 29, 23, -2, -3, 23, -4, 4, -7, 24, 14, -2, -10, -49, -4, 24, -14, 24, 8, -18, 8, -4, -18, 12, -4, 33, -2, -1, -11, -25, 3, 21, 7, 19, -5, -30, 22, -4, -8, 12, -2, 24, -11, 7, -10, -10, 1, 11, 9, 24, -15, -16, 17, -16, -8, 2, 2, 16, -9, 2, -8, 11, 7, 7, 7, 11, -12, -28, 9, -6, 7, -10, -9, -8, -9, -8, -13, 19, 7, 16, 1, -6, 9, -13, -5, 10, 3, -14, 6, -53, 0, -18, -12, 1, -4, -4, -12, -16, 16, -5, -23, 40, 24, -17, -12, 0, 7, -18, -9, 7, 0, 47, -20, -8, 2, 18, -49, -14, -12, 
  -1, -3, 3, -3, 2, -2, -6, -5, 1, -1, -4, 1, 0, -5, -5, -2, 0, -6, 4, 3, -6, -6, -2, 1, 2, 2, -1, -5, 1, -1, -3, -1, 2, -4, -1, 1, 1, 2, 0, -1, 3, -2, 0, -4, -5, -4, 0, 2, 0, -4, -4, 2, 1, -2, 1, 3, -2, -1, 0, 1, -4, 0, -7, -3, 1, 3, -4, -7, -6, -3, -2, -4, 0, -1, -1, 3, -4, -4, 2, 2, -2, -5, 0, -4, -4, -5, 2, 0, -6, 1, -6, -1, 1, -2, -5, 0, -7, -1, -1, 0, -7, 0, -5, 3, -1, -4, 1, -4, 0, -6, 2, -5, 1, -3, -4, -5, 0, 4, 2, -4, 5, -4, 0, 0, -4, -2, -4, -5, -5, -5, -6, 2, 0, 4, -3, -5, -1, 1, 5, 3, -6, 0, -1, -5, 0, -4, 0, 2, 0, 0, 3, -4, -5, -2, -3, -7, 0, -4, 3, 3, 4, -1, 2, 3, -6, -4, -1, -1, -1, -1, -4, -5, -3, -5, 4, 2, -3, 0, -5, -2, -1, 1, -3, -3, -1, -4, 0, -6, -3, -3, 3, 0, 2, 1, 2, 3, -1, -3, 1, 1, 0, -5, -4, -5, 3, 1, -1, -1, -5, -6, 3, -2, -5, 1, 3, -6, -5, -5, 3, -1, 2, -3, -2, 0, -1, -1, 0, -5, -4, 0, 2, 1, 0, 0, -5, -5, 1, -2, 0, -3, -4, -3, -5, -2, 2, 1, -1, 1, -3, 0, -1, 3, -6, 0, -2, 0, -3, -1, -1, 2, -2, -5, 1, 2, 4, 4, -5, 4, -2, -6, 0, -4, -4, -3, -2, 0, -2, -5, 5, -5, 1, 0, -3, 1, 0, 1, 0, 1, -2, -3, -1, 1, 3, 3, 4, -2, 2, 3, -6, 0, -5, -4, -4, -4, -6, 3, -2, 2, -2, 3, -1, -6, 1, -4, -3, 3, -2, 1, -1, 0, 1, -5, -1, 4, 2, -4, -1, -3, -2, -1, 4, 2, -5, -2, 1, -2, -3, -5, -2, -3, -5, -2, 3, -4, -2, -5, -5, 2, -3, 2, 2, 3, -6, 0, -3, 0, -3, -7, 3, -7, 2, 3, 3, -1, -3, -5, -6, -7, -2, 0, -1, 1, -1, 2, -4, 0, -3, -4, 2, -5, 3, -4, 3, -1, -7, 2, 0, -3, -3, -2, 0, -1, -3, 1, -4, -1, 1, -3, -5, 2, 1, 2, -1, 3, -3, -5, 4, 1, -3, -2, -1, -3, -5, -3, -1, -3, 3, -5, 2, -4, 2, 2, -2, -2, -1, 1, -3, -2, -2, -6, -1, -4, -4, -1, 0, 1, -2, -2, -4, 1, -3, -4, -1, 1, 1, -3, -2, 3, -3, -3, -6, 2, -4, -1, -3, 1, 4, -3, -4, -2, -3, 2, -3, 3, 1, 2, 3, 3, -6, 5, -3, 2, 4, -4, -4, -2, -6, -6, -2, -5, -5, -2, 3, 2, -1, -3, -3, 1, 3, 1, -1, -4, 2, -3, 1, 3, -1, 1, 0, -1, -6, 4, -3, -6, 2, 4, -5, -4, -4, -5, -6, -6, -6, -5, 0, 2, 3, -5, -1, -3, 0, -5, 3, 3, -1, -5, 4, -1, -4, -2, -5, -4, 3, -5, -1, 1, 5, 4, 2, 1, -3, 1, 4, -1, -3, -4, -3, -3, 1, 4, 5, 0, 2, 2, -3, 2, 2, -1, 0, -6, -6, 1, 1, -2, -6, -3, 2, 3, -4, -4, -1, 3, 1, -3, 0, 1, -6, 0, 3, -6, -2, 2, 1, 3, -2, -1, 2, 1, 3, -1, -5, 2, -5, -5, -2, 3, 3, 4, -4, -2, 3, -1, -6, -3, 4, 0, 0, 0, 2, 1, 2, -4, -6, -1, 1, -5, 1, -2, 0, -2, -7, 0, -1, 0, -6, -5, 1, -6, 2, 2, -2, -2, -5, -1, 1, -5, 2, -6, 2, 4, -1, 0, -4, 0, -6, 1, 0, 4, -4, -3, -5, -5, 0, -6, 3, -5, 4, -4, -5, 4, -2, 2, -1, -3, -5, -1, 1, -6, 2, -2, -5, 0, 
  -3, 15, -31, -8, -1, 8, 41, 13, -4, -11, 1, 1, 11, -7, 7, 17, 2, 2, -19, 16, -1, 45, 30, 13, 2, 4, 14, -18, 11, 10, 9, 29, 2, -15, -4, 9, -4, 29, 7, -2, 13, 16, 10, -12, 24, 33, 13, 30, 0, -19, -11, -2, -9, -24, -13, 2, 15, 5, 7, 2, -2, 22, 3, 4, 2, 2, -3, 0, 2, -50, 8, 4, 8, -16, -13, 29, 2, 7, -21, -28, -26, 14, -29, 3, -5, -51, 15, 22, 13, -23, -18, 46, -22, -8, -32, -70, -23, 31, -5, -12, -26, 2, 30, 9, -11, -17, 7, 52, 26, -35, -36, -15, -20, 30, -6, -24, -16, 12, 43, -16, -16, -18, 8, 26, 32, -47, -13, 7, -13, 8, -11, -15, -10, 37, 27, -3, -6, 2, -5, -2, 35, -33, 10, 26, -9, -15, 2, 4, -9, 29, 2, 7, -9, -2, 8, -24, 30, -22, 21, 30, -22, -33, -1, 11, -1, -12, -15, 4, -1, 2, 21, -39, 0, -16, 5, -7, 0, -13, 11, 6, 14, -41, -6, -4, 5, -5, 24, -16, -18, -8, -37, -59, -1, 10, 18, -4, 14, -68, 7, 3, 25, -28, 24, 5, -37, 2, -47, -68, 8, 17, -4, 10, 11, -17, 23, 7, 21, -18, 2, 17, 15, 14, -27, -33, 9, 14, -12, -15, 16, -4, 34, -3, 24, -4, 2, 18, 13, 17, -10, -12, 23, 5, -11, -10, 23, 19, 11, -3, 24, -17, -16, 2, 18, 19, 3, 8, 8, -15, 10, -1, 19, -2, -10, 17, 12, -22, -16, 2, 12, 9, 4, -6, -5, -22, 1, 19, 2, -9, -34, 19, -7, -16, -9, -1, 42, -13, -2, 1, -23, -13, 11, 17, -18, -9, -25, 23, -17, 2, -22, -25, 0, -27, -3, 4, -16, 0, 10, 8, -21, 7, -20, -10, -30, 21, 7, -15, 6, -19, -13, -12, -10, -11, 5, 0, -16, 1, -4, -25, -23, 22, -9, -16, 7, 9, -17, -6, -3, -16, -23, -1, 3, -9, 2, -9, -7, -7, -1, -16, 25, 25, -38, -10, 15, -15, -25, -8, 7, -2, 26, 20, 27, -22, 2, 0, 19, 31, -39, -6, 19, -1, -19, 6, 7, 4, 27, 19, 27, -33, -14, 25, 11, 28, -18, 3, -1, 5, -44, 5, -7, -8, 26, 11, 15, -24, -33, 22, 9, 12, -10, 17, -12, 11, -44, 0, -17, 4, 21, 0, -4, -4, -40, 26, 18, -2, -3, 4, -24, 11, -21, -15, -13, -1, 4, -17, -14, 13, -19, 15, 0, -11, 20, 12, -22, 14, -14, -5, -11, 9, -9, -2, -15, 22, 0, 15, -11, -18, 13, 11, -18, 7, -28, 16, -6, 22, -30, 8, -16, 4, 9, -3, -8, -11, -6, 2, -15, 7, -32, 8, -7, 4, -9, 8, -3, 14, 15, -1, -5, -21, -28, -13, -6, 11, -20, 6, -10, 24, 19, -9, -11, -9, 14, 6, 36, -19, -15, 5, -14, 7, -45, -5, -8, 15, 45, -11, -3, -11, 1, -8, 25, -16, 20, 18, -3, 0, -37, 0, 4, 4, 28, -5, 0, -18, -14, -12, 9, -6, 23, 16, 6, -11, -16, 4, 13, -7, 7, 13, -4, -5, -3, -3, -17, -4, 15, -5, 17, -2, 5, 20, 18, -22, -28, 14, 1, 11, 6, 4, -28, 9, -5, -23, 7, -3, 26, 18, 17, -30, -28, 6, 4, 19, 8, 1, -2, 17, -33, -50, 21, 15, 17, -4, 22, 10, -35, -7, -5, 9, -15, -10, 23, 11, -39, -31, 12, 19, 23, -21, 19, 15, -9, -33, 7, -15, -1, -18, 24, 15, -30, -9, 3, 21, -8, -19, 18, 26, -27, -40, 20, -34, -15, -27, 27, 15, -8, 22, 3, -4, -10, -13, 12, 17, -19, -17, 21, -38, -46, -21, 34, 6, -7, 22, -6, -14, -8, 3, 1, 8, -39, 1, 12, -28, -36, 6, 45, -5, 10, 18, -3, -20, -9, 3, -12, -22, -58, 11, 11, -17, -53, -10, 29, -14, 23, 2, 
  4, 16, 7, 0, 12, 12, -4, 7, -39, 3, 16, -5, -21, -21, 6, -15, -2, 12, -28, -4, 14, 15, -7, 10, -43, 12, -26, -27, -47, -12, 16, 3, 4, -22, -48, -5, 16, -13, 33, -3, -39, 0, -79, -19, -70, -11, 0, 5, 15, -33, -34, -10, 24, -45, 26, -15, -29, -9, -55, -20, -46, -2, -6, -3, 13, -25, -5, -13, 24, -44, 30, -33, -1, -19, -18, -9, -21, -1, -8, -3, 17, -21, -7, -7, 9, -16, 19, -39, 11, -11, -15, -10, 11, -3, -12, -2, 11, -10, 5, 7, 0, -22, 11, -34, 30, -5, -8, -1, 16, 2, -3, 25, 11, 1, 0, -4, -2, -13, -1, -23, 17, -9, -7, 2, 3, 5, 5, 11, 9, 8, 19, -2, 12, 6, -6, -19, 25, -4, 7, -6, 1, 15, 15, 10, 4, 11, 15, 0, 1, 23, -2, -8, 40, 3, 0, 1, -4, 20, 18, 12, -3, 6, 16, -4, -10, 28, 1, 1, 41, 3, 2, 7, -10, 20, 13, 12, 0, 5, 24, -11, -10, 28, 5, -4, 36, 12, 0, 8, -17, 11, 5, -4, -5, 7, 26, -18, -15, 12, 0, -16, 28, -3, 13, 2, -8, 10, 0, -2, -6, 11, 21, -2, -21, 19, -17, -10, 29, 9, 20, 5, -2, 2, 9, 5, -7, 18, 32, 6, -21, 25, -24, 13, 16, 19, 22, 21, -5, -3, -2, -15, 1, 5, 17, 17, -6, 22, -32, 7, 6, 27, 21, 9, -7, -2, -4, -9, -6, 7, 20, 8, -1, 12, -20, 6, -7, 41, 41, -8, -19, -8, -2, 0, -2, -11, 22, 2, 2, 13, 6, 13, -30, 38, 37, -12, -24, -15, -19, -12, -9, -35, -18, 1, 2, 13, -7, 4, -40, 34, -17, -37, -36, -14, -5, 10, -9, -63, -49, -21, -6, 3, 21, 1, -56, 17, -63, -30, -17, -20, 11, 4, 6, -51, -68, 3, 16, -52, 56, -4, -32, 10, -46, -4, -15, -10, 27, 15, -3, -46, -46, 10, 12, -73, 61, -1, -32, -2, -50, 19, -9, -10, 39, 19, 0, -46, -26, 22, -13, -62, 66, -16, -11, -4, -86, 21, 32, -11, 41, 36, -5, -36, -43, 18, -15, -47, 12, -29, 2, -5, -68, -7, 44, 3, 26, 23, 6, -1, 1, -1, -7, 1, -7, -22, 5, -15, -13, -12, 17, 10, 21, 9, 16, 18, 14, 5, 10, 4, 12, -15, 19, -10, 21, -7, 3, -1, 9, 8, 7, 35, 32, -3, 16, 16, 0, -5, 14, -22, 27, 3, -13, -15, 0, 5, 8, 28, 30, -4, 17, 13, 1, 5, 26, -23, 15, 5, -16, -12, 19, 9, 11, 29, 31, 11, 15, 26, -10, 19, 34, -20, 4, 35, -4, -13, 22, 8, 12, 37, 35, 6, 6, 19, -21, 15, 23, -11, 4, 41, -9, -19, 10, 7, 1, 29, 32, 1, -4, 9, -36, -6, 23, -24, 20, 40, -5, -10, 5, 0, 12, 36, 31, 3, -5, 6, -52, 1, 28, -12, 25, 24, -11, -8, -1, 3, 15, 30, 36, 2, 18, 16, -57, 3, 18, 5, 25, 21, -20, -3, -12, -22, 27, 27, 52, -2, 21, 6, -48, -5, 22, 3, 41, 6, -30, -6, -19, -17, 18, 8, 46, -16, 14, -2, -18, -8, 8, 17, 26, -1, -7, 2, -29, -3, 11, -11, 7, -13, 9, -2, -8, -21, -13, 23, 1, -27, -2, -2, -28, -5, 13, -50, -28, -19, -2, 5, 8, -22, -16, 42, -26, -32, -22, -3, -3, 14, 0, -74, -44, 2, -1, -11, -1, -19, -20, 45, -56, -27, -19, 0, 15, 12, 4, -88, -19, 19, -11, -67, 25, -13, -14, 24, -97, -6, -2, 8, 35, 21, 0, -80, -46, 26, -10, -76, 51, -16, 1, 14, -111, -21, 4, 11, 42, 17, -5, -56, -53, 10, -17, -40, 33, -24, 5, 24, -127, -25, 7, 9, 26, 17, -18, -42, -22, 11, -23, 6, 17, -7, 13, -7, -59, -26, 15, 8, -13, -3, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 32,672 } };
const TfArray<1, float> quant6_scale = { 1, { 0.018056336790323257, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[16] = { -1747, -186, -2021, -1341, -1930, -680, 663, -367, -2320, -558, -1591, 1575, -2441, -2462, -554, -1579, };
const TfArray<1, int> tensor_dimension7 = { 1, { 16 } };
const TfArray<16, float> quant7_scale = { 16, { 0.00018928713689092547, 0.00035426576505415142, 0.00029921517125330865, 0.00020588016195688397, 0.00015863480803091079, 0.00025350271607749164, 0.00037429571966640651, 0.00041541235987097025, 0.00031446234788745642, 0.00042935303645208478, 0.00032490320154465735, 0.00022241962142288685, 0.00032328307861462235, 0.0001420168555341661, 0.00033050894853658974, 0.00020321460033301264, } };
const TfArray<16, int> quant7_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[16*3*3*1] = { 
  /* [0][0][][] */ -2, 78, -1, 
  /* [0][1][][] */ 42, -40, -127, 
  /* [0][2][][] */ 83, -127, 99, 
  /* [1][0][][] */ 43, -9, -127, 
  /* [1][1][][] */ -73, -18, -9, 
  /* [1][2][][] */ 26, 19, -106, 
  /* [2][0][][] */ 41, -25, -127, 
  /* [2][1][][] */ -26, -105, 23, 
  /* [2][2][][] */ 15, -44, 24, 
  /* [3][0][][] */ -122, 32, 42, 
  /* [3][1][][] */ 120, 12, -63, 
  /* [3][2][][] */ -127, 12, 61, 
  /* [4][0][][] */ 109, -127, -76, 
  /* [4][1][][] */ 27, -62, -27, 
  /* [4][2][][] */ 101, -24, 76, 
  /* [5][0][][] */ -47, -48, 102, 
  /* [5][1][][] */ -64, 92, -29, 
  /* [5][2][][] */ 113, -127, -117, 
  /* [6][0][][] */ -81, -93, -127, 
  /* [6][1][][] */ -16, -19, -63, 
  /* [6][2][][] */ -82, -123, -56, 
  /* [7][0][][] */ -127, -38, 33, 
  /* [7][1][][] */ -25, 6, 5, 
  /* [7][2][][] */ -52, -71, -12, 
  /* [8][0][][] */ 79, -7, -33, 
  /* [8][1][][] */ 26, -3, -127, 
  /* [8][2][][] */ 27, 22, -58, 
  /* [9][0][][] */ -98, -10, 15, 
  /* [9][1][][] */ -42, -46, 40, 
  /* [9][2][][] */ -87, -2, -127, 
  /* [10][0][][] */ -45, 41, -107, 
  /* [10][1][][] */ -3, -27, -69, 
  /* [10][2][][] */ -67, -44, -127, 
  /* [11][0][][] */ -10, -109, -120, 
  /* [11][1][][] */ -40, -62, -53, 
  /* [11][2][][] */ -60, -127, -25, 
  /* [12][0][][] */ -65, 22, 46, 
  /* [12][1][][] */ -58, 17, -5, 
  /* [12][2][][] */ 127, -16, 49, 
  /* [13][0][][] */ 90, 35, 15, 
  /* [13][1][][] */ 53, 127, 87, 
  /* [13][2][][] */ 112, 37, 35, 
  /* [14][0][][] */ 84, 8, -127, 
  /* [14][1][][] */ -8, -13, 30, 
  /* [14][2][][] */ -68, -41, 99, 
  /* [15][0][][] */ -14, 69, 27, 
  /* [15][1][][] */ 55, -86, -119, 
  /* [15][2][][] */ -18, 55, 127, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 16,3,3,1 } };
const TfArray<16, float> quant8_scale = { 16, { 0.0031851211097091436, 0.0059612044133245945, 0.005034872330725193, 0.0034643306862562895, 0.0026693365070968866, 0.0042656720615923405, 0.0062982472591102123, 0.0069901137612760067, 0.0052914354018867016, 0.0072246924974024296, 0.0054671228863298893, 0.0037426389753818512, 0.005439861211925745, 0.0023897073697298765, 0.0055614504963159561, 0.0034194774925708771, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<4, int> tensor_dimension9 = { 4, { 1,125,3,1 } };
const TfArray<1, float> quant9_scale = { 1, { 0.059428554028272629, } };
const TfArray<1, int> quant9_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<4, int> tensor_dimension10 = { 4, { 1,125,3,16 } };
const TfArray<1, float> quant10_scale = { 1, { 0.037577547132968903, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfArray<4, int> tensor_dimension11 = { 4, { 1,42,1,16 } };
const TfArray<1, float> quant11_scale = { 1, { 0.037577547132968903, } };
const TfArray<1, int> quant11_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<2, int> tensor_dimension12 = { 2, { 1,672 } };
const TfArray<1, float> quant12_scale = { 1, { 0.037577547132968903, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<2, int> tensor_dimension13 = { 2, { 1,32 } };
const TfArray<1, float> quant13_scale = { 1, { 0.51822316646575928, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<2, int> tensor_dimension14 = { 2, { 1,6 } };
const TfArray<1, float> quant14_scale = { 1, { 3.27297043800354, } };
const TfArray<1, int> quant14_zero = { 1, { 101 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<2, int> tensor_dimension15 = { 2, { 1,6 } };
const TfArray<1, float> quant15_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 9 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 9,8,7 } };
const TfArray<1, int> outputs1 = { 1, { 10 } };
const TfLitePoolParams opdata2 = { kTfLitePaddingSame, 3,3, 3,3, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs2 = { 1, { 10 } };
const TfArray<1, int> outputs2 = { 1, { 11 } };
const TfLiteReshapeParams opdata3 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs3 = { 2, { 11,2 } };
const TfArray<1, int> outputs3 = { 1, { 12 } };
const TfLiteFullyConnectedParams opdata4 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs4 = { 3, { 12,6,5 } };
const TfArray<1, int> outputs4 = { 1, { 13 } };
const TfLiteFullyConnectedParams opdata5 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs5 = { 3, { 13,4,3 } };
const TfArray<1, int> outputs5 = { 1, { 14 } };
const TfLiteSoftmaxParams opdata6 = { 1 };
const TfArray<1, int> inputs6 = { 1, { 14 } };
const TfArray<1, int> outputs6 = { 1, { 15 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 375, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 8, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 24, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 21504, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6000), (TfLiteIntArray*)&g0::tensor_dimension9, 375, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension10, 6000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6000), (TfLiteIntArray*)&g0::tensor_dimension11, 672, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension12, 672, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 672), (TfLiteIntArray*)&g0::tensor_dimension13, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16), (TfLiteIntArray*)&g0::tensor_dimension14, 6, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension15, 6, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[7] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[7] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata5)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_RESHAPE, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 16, };
const size_t tflNodes_subgraph_index[] = {0, 7, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  15, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 16;
  for (size_t i = 0; i < 16; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 7; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
